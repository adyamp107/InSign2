import customtkinter as ctk
from tkinter import filedialog, messagebox

import mediapipe as mp
from PIL import Image
import cv2

import os
import io
import queue

import threading
import pkg_resources
import json

import re
import csv
import pandas as pd
import numpy as np
import shutil
import time

from collections import Counter
import pickle

import openpyxl
from openpyxl import Workbook
from openpyxl import load_workbook
from openpyxl.styles import Font, Border, Side

import base64

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix

import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing import image

import pathlib

import warnings

from datetime import datetime

import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import seaborn as sns

ctk.set_appearance_mode("system")
ctk.set_default_color_theme("green")

warnings.filterwarnings('ignore')

icon_base64 = '''

'''
icon_bytes = base64.b64decode(icon_base64)
temp_icon_path = "InSign.ico"
with open(temp_icon_path, "wb") as temp_icon_file:
    temp_icon_file.write(icon_bytes)

class App(ctk.CTk):
    def __init__(self):
        super().__init__()

        self.app_width = 1200
        self.app_height = 650
        self.width_minsize = 1000
        self.height_minsize = 500
        self.app_x = 25
        self.app_y = 25
        self.iconbitmap(default=temp_icon_path)
        self.title("InSign")
        self.geometry(f"{self.app_width}x{self.app_height}+{self.app_x}+{self.app_y}")
        self.minsize(self.width_minsize, self.height_minsize)
        self.resizable(width=True, height=True)
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        self.font_24 = ("Roboto", 24, "bold")
        self.font_17 = ("Roboto", 17, "bold")
        self.font_17_light = ("Roboto", 17)
        self.font_14_consolas = ("Consolas", 14)
        self.font_14 = ("Roboto", 14)
        self.font_13 = ("Roboto", 13)
        self.font_11 = ("Roboto", 11)
        
        logo_path = pkg_resources.resource_string(__name__, 'assets/InSign.png')

        dark_home_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_home.png')
        light_home_logo_path = pkg_resources.resource_string(__name__, 'assets/light_home.png')
        dark_translate_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_translate.png')
        light_translate_logo_path = pkg_resources.resource_string(__name__, 'assets/light_translate.png')
        dark_dataset_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_dataset.png')
        light_dataset_logo_path = pkg_resources.resource_string(__name__, 'assets/light_dataset.png')
        dark_training_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_training.png')
        light_training_logo_path = pkg_resources.resource_string(__name__, 'assets/light_training.png')
        dark_history_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_history.png')
        light_history_logo_path = pkg_resources.resource_string(__name__, 'assets/light_history.png')
        dark_tutorial_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_tutorial.png')
        light_tutorial_logo_path = pkg_resources.resource_string(__name__, 'assets/light_tutorial.png')
        dark_setting_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_setting.png')
        light_setting_logo_path = pkg_resources.resource_string(__name__, 'assets/light_setting.png')
        dark_marker_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_marker.png')
        light_marker_logo_path = pkg_resources.resource_string(__name__, 'assets/light_marker.png')
        dark_restart_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_restart.png')
        light_restart_logo_path = pkg_resources.resource_string(__name__, 'assets/light_restart.png')
        dark_start_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_start.png')
        light_start_logo_path = pkg_resources.resource_string(__name__, 'assets/light_start.png')
        dark_stop_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_stop.png')
        light_stop_logo_path = pkg_resources.resource_string(__name__, 'assets/light_stop.png')
        dark_erase_logo_path = pkg_resources.resource_string(__name__, 'assets/dark_erase.png')
        light_erase_logo_path = pkg_resources.resource_string(__name__, 'assets/light_erase.png')

        self.logo_image = ctk.CTkImage(Image.open(io.BytesIO(logo_path)), size=(30, 30))

        self.home_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_home_logo_path)), dark_image=Image.open(io.BytesIO(light_home_logo_path)), size=(25, 25))
        self.translate_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_translate_logo_path)), dark_image=Image.open(io.BytesIO(light_translate_logo_path)), size=(25, 25))
        self.dataset_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_dataset_logo_path)), dark_image=Image.open(io.BytesIO(light_dataset_logo_path)), size=(25, 25))
        self.training_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_training_logo_path)), dark_image=Image.open(io.BytesIO(light_training_logo_path)), size=(25, 25))
        self.history_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_history_logo_path)), dark_image=Image.open(io.BytesIO(light_history_logo_path)), size=(25, 25))
        self.tutorial_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_tutorial_logo_path)), dark_image=Image.open(io.BytesIO(light_tutorial_logo_path)), size=(25, 25))
        self.setting_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_setting_logo_path)), dark_image=Image.open(io.BytesIO(light_setting_logo_path)), size=(25, 25))

        self.marker_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_marker_logo_path)), dark_image=Image.open(io.BytesIO(light_marker_logo_path)), size=(25, 25))
        self.restart_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_restart_logo_path)), dark_image=Image.open(io.BytesIO(light_restart_logo_path)), size=(25, 25))
        self.start_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_start_logo_path)), dark_image=Image.open(io.BytesIO(light_start_logo_path)), size=(25, 25))
        self.stop_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_stop_logo_path)), dark_image=Image.open(io.BytesIO(light_stop_logo_path)), size=(25, 25))
        self.erase_logo = ctk.CTkImage(light_image=Image.open(io.BytesIO(dark_erase_logo_path)), dark_image=Image.open(io.BytesIO(light_erase_logo_path)), size=(25, 25))

        self.home_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/home.png'))), size=(720, 390))
        self.translate_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/translate.png'))), size=(720, 390))
        self.dataset_add_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/dataset_add.png'))), size=(720, 390))
        self.dataset_delete_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/dataset_delete.png'))), size=(720, 390))
        self.dataset_redata_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/dataset_redata.png'))), size=(720, 390))
        self.dataset_relabel_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/dataset_relabel.png'))), size=(720, 390))
        self.training_classification_report_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/training_classification_report.png'))), size=(720, 390))
        self.training_confusion_matrix_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/training_confusion_matrix.png'))), size=(720, 390))
        self.training_error_rate_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/training_error_rate.png'))), size=(720, 390))
        self.training_epoch_loss_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/training_epoch_loss.png'))), size=(720, 390))
        self.training_epoch_accuracy_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/training_epoch_accuracy.png'))), size=(720, 390))
        self.history_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/history.png'))), size=(720, 390))
        self.setting_image = ctk.CTkImage(Image.open(io.BytesIO(pkg_resources.resource_string(__name__, 'assets/setting.png'))), size=(720, 390))

        # ==================================================================

        self.mp_drawing = mp.solutions.drawing_utils
        self.mp_holistic = mp.solutions.holistic
        self.holistic = self.mp_holistic.Holistic(min_detection_confidence=0.5, min_tracking_confidence=0.5)
        
        # ==================================================================

        self.on_dataset_add_camera_label = False
        self.on_dataset_redata_camera_label = False

        self.on_add_data = False
        self.on_redata_data = False

        self.total_data = 300
        self.count_data = 0
        
        self.landmark_data = []
        self.image_data = []

        # ==================================================================

        self.canvas_classification_report = None
        self.canvas_confusion_matrix = None
        self.canvas_error_rate = None
        self.canvas_epoch_loss = None
        self.canvas_epoch_accuracy = None

        # ==================================================================

        self.form_create_top_level = None

        # ==================================================================

        self.on_translate_camera_label = False

        self.on_translate_marker = False
        self.on_tranlsate_with_training_model = None
        self.with_history_path = None

        self.translate_history_data = []
        self.check_translate = []

        self.count_time = 0

        # ==================================================================

        self.button_group = []
        self.switch_group = []
        self.optionmenu_group = []
        self.progressbar_group = []
        self.tabview_group = []
        self.header_group = []

        self.form_button_group = []
        self.form_optionmenu_group = []

        self.blue_json_path = pkg_resources.resource_string(__name__, 'themes/blue.json')
        self.dark_blue_json_path = pkg_resources.resource_string(__name__, 'themes/dark-blue.json')
        self.green_json_path = pkg_resources.resource_string(__name__, 'themes/green.json')

        self.blue_json_string = self.blue_json_path.decode('utf-8')
        self.dark_blue_json_string = self.dark_blue_json_path.decode('utf-8')
        self.green_json_string = self.green_json_path.decode('utf-8')

        # ==================================================================

        self.navigation_frame = ctk.CTkFrame(self, corner_radius=0, width=180)
        self.navigation_frame.grid(row=0, column=0, sticky="ns")
        self.navigation_frame.grid_rowconfigure(0, weight=1, minsize=90/0.8, uniform="navigation_frame_1")
        self.navigation_frame.grid_rowconfigure(7, weight=1, minsize=60/0.8, uniform="navigation_frame_1")
        self.navigation_frame.grid_columnconfigure(0, weight=1)
        self.navigation_frame.grid_propagate(False)

        # button

        self.navigation_frame_label = ctk.CTkLabel(self.navigation_frame, height=50, text=" InSign ", image=self.logo_image, compound="left", anchor="center", font=self.font_17, fg_color="transparent", text_color=("gray10", "gray90"))
        self.navigation_frame_label.grid(row=0, column=0, pady=20, sticky="new")

        self.home_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="Home", image=self.home_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.home_button_event)
        self.home_button.grid(row=1, column=0, padx=10, pady=0, sticky="nsew")

        self.translate_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="Translate", image=self.translate_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.translate_button_event)
        self.translate_button.grid(row=2, column=0, padx=10, pady=0, sticky="nsew")

        self.dataset_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="Dataset", image=self.dataset_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.dataset_button_event)
        self.dataset_button.grid(row=3, column=0, padx=10, pady=0, sticky="nsew")

        self.training_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="Training", image=self.training_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.training_button_event)
        self.training_button.grid(row=4, column=0, padx=10, pady=0, sticky="nsew")

        self.history_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="History", image=self.history_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.history_button_event)
        self.history_button.grid(row=5, column=0, padx=10, pady=0, sticky="nsew")

        self.tutorial_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="Tutorial", image=self.tutorial_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.tutorial_button_event)
        self.tutorial_button.grid(row=6, column=0, padx=10, pady=0, sticky="nsew")

        self.setting_button = ctk.CTkButton(self.navigation_frame, corner_radius=10, border_spacing=10, height=40, text="Setting", image=self.setting_logo, compound="left", fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=self.setting_button_event)
        self.setting_button.grid(row=7, column=0, padx=10, pady=(0, 10), sticky="sew")

        # frame

        self.home_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.home_frame.grid_rowconfigure(0, weight=1)
        self.home_frame.grid_columnconfigure(0, weight=1)

        self.translate_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.translate_frame.grid_rowconfigure(0, weight=1)
        self.translate_frame.grid_columnconfigure(0, weight=1)

        self.dataset_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.dataset_frame.grid_rowconfigure(1, weight=1)
        self.dataset_frame.grid_columnconfigure((0, 1, 2), weight=1, uniform="dataset_frame_1")

        self.training_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.training_frame.grid_rowconfigure(0, weight=1)
        self.training_frame.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_frame_1")

        self.history_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.history_frame.grid_rowconfigure(1, weight=1)
        self.history_frame.grid_columnconfigure((0, 1, 2), weight=1, uniform="history_frame_1")

        self.tutorial_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.tutorial_frame.grid_rowconfigure(0, weight=1)
        self.tutorial_frame.grid_columnconfigure(0, weight=1)        

        self.setting_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.setting_frame.grid_rowconfigure(0, weight=1)
        self.setting_frame.grid_columnconfigure((0, 1, 2), weight=1, uniform="setting_frame_1")
        
        self.dataset_add_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.dataset_add_frame.grid_rowconfigure(0, weight=1)
        self.dataset_add_frame.grid_columnconfigure(0, weight=1)

        self.dataset_redata_frame = ctk.CTkFrame(self, corner_radius=0, fg_color="transparent")
        self.dataset_redata_frame.grid_rowconfigure(0, weight=1)
        self.dataset_redata_frame.grid_columnconfigure(0, weight=1)

        self.set_up_home_frame()
        self.set_up_translate_frame()
        self.set_up_dataset_frame()
        self.set_up_training_frame()
        self.set_up_history_frame()
        self.set_up_tutorial_frame()
        self.set_up_setting_frame()

        self.set_up_dataset_add_frame()
        self.set_up_dataset_redata_frame()

        self.cap = None
        self.cap = cv2.VideoCapture(0)
        self.cap.read()

        self.camera_event()
        
        self.home_button_event()

        self.protocol("WM_DELETE_WINDOW", self.on_close_main)

# ==============================================================================================================================================

    def select_frame_by_name(self, name):
        if self.on_translate_camera_label == True and self.on_tranlsate_with_training_model is not None:
            messagebox.showinfo('Warning', "Sorry, you can't go to another page while the translation process is in progress!")
            return

        self.home_button.configure(fg_color=("gray75", "gray25") if name == "home" else "transparent")
        self.translate_button.configure(fg_color=("gray75", "gray25") if name == "translate" else "transparent")      
        self.dataset_button.configure(fg_color=("gray75", "gray25") if name == "dataset" else "transparent")      
        self.training_button.configure(fg_color=("gray75", "gray25") if name == "training" else "transparent")      
        self.history_button.configure(fg_color=("gray75", "gray25") if name == "history" else "transparent")      
        self.tutorial_button.configure(fg_color=("gray75", "gray25") if name == "tutorial" else "transparent")
        self.setting_button.configure(fg_color=("gray75", "gray25") if name == "setting" else "transparent")

        if name == "home":
            self.home_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.home_frame.grid_forget()
        if name == "translate":
            self.on_translate_camera_label = True
            self.translate_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.on_translate_camera_label = False
            self.translate_frame.grid_forget()
        if name == "dataset":
            self.dataset_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.dataset_frame.grid_forget()
        if name == "training":
            self.training_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.training_frame.grid_forget()        
        if name == "history":
            self.history_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.history_frame.grid_forget()                                   
        if name == "tutorial":
            self.tutorial_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.tutorial_frame.grid_forget()
        if name == "setting":
            self.setting_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        else:
            self.setting_frame.grid_forget()
        if name == "add":
            self.on_dataset_add_camera_label = True
            self.dataset_add_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)            
        else:
            self.on_dataset_add_camera_label = False
            self.dataset_add_frame.grid_forget()       
        if name == "redata":
            self.on_dataset_redata_camera_label = True
            self.dataset_redata_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)                        
        else:        
            self.on_dataset_redata_camera_label = False
            self.dataset_redata_frame.grid_forget()

    def home_button_event(self):
        self.select_frame_by_name("home")

    def translate_button_event(self):
        self.select_frame_by_name("translate")

    def dataset_button_event(self):
        self.select_frame_by_name("dataset")   

    def training_button_event(self):
        self.select_frame_by_name("training")

    def history_button_event(self):
        self.select_frame_by_name("history")

    def tutorial_button_event(self):
        self.select_frame_by_name("tutorial")

    def setting_button_event(self):
        self.select_frame_by_name("setting")

# ==============================================================================================================================================

    def set_up_home_frame(self):
        self.home_control_frame = ctk.CTkFrame(self.home_frame, corner_radius=10, fg_color="transparent")
        self.home_control_frame.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
        self.home_control_frame.grid_columnconfigure((1, 2, 3), weight=2, uniform="home_control_frame_1")
        self.home_control_frame.grid_columnconfigure((0, 4), weight=1, uniform="home_control_frame_2")
        self.home_control_frame.grid_rowconfigure((2, 3), weight=3, uniform="home_control_frame_3")
        self.home_control_frame.grid_rowconfigure((0, 4), weight=2, uniform="home_control_frame_4")
        self.home_control_frame.grid_rowconfigure((1), weight=1, uniform="home_control_frame_5")

        self.home_control_label = ctk.CTkLabel(self.home_control_frame, text="Let's do sign language", anchor="center", font=self.font_24, height=20)
        self.home_control_label.grid(row=1, column=1, columnspan=3, padx=20, pady=20, sticky="nsew")

        self.home_to_dataset_button = ctk.CTkButton(self.home_control_frame, text="Dataset", corner_radius=10, font=self.font_17_light, command=self.dataset_button_event)
        self.home_to_dataset_button.grid(row=2, column=1, padx=(10, 10), pady=(10, 10), sticky="nsew")
        
        self.home_to_training_button = ctk.CTkButton(self.home_control_frame, text="Training", corner_radius=10, font=self.font_17_light, command=self.training_button_event)
        self.home_to_training_button.grid(row=2, column=2, padx=(10, 10), pady=(10, 10), sticky="nsew")
        
        self.home_to_history_button = ctk.CTkButton(self.home_control_frame, text="History", corner_radius=10, font=self.font_17_light, command=self.history_button_event)
        self.home_to_history_button.grid(row=3, column=1, padx=(10, 10), pady=(10, 10), sticky="nsew")
        
        self.home_to_setting_button = ctk.CTkButton(self.home_control_frame, text="Setting", corner_radius=10, font=self.font_17_light, command=self.setting_button_event)
        self.home_to_setting_button.grid(row=3, column=2, padx=(10, 10), pady=(10, 10), sticky="nsew")
        
        self.home_to_translate_button = ctk.CTkButton(self.home_control_frame, text="Setting", corner_radius=10, font=self.font_17_light, command=self.translate_button_event)
        self.home_to_translate_button.grid(row=2, column=3, rowspan=2, padx=(10, 10), pady=(10, 10), sticky="nsew")
        
        self.button_group.extend([self.home_to_dataset_button, self.home_to_training_button, self.home_to_history_button, self.home_to_setting_button, self.home_to_translate_button])

    def set_up_translate_frame(self):
        self.translate_camera_label = ctk.CTkLabel(self.translate_frame, corner_radius=0, width=640, height=480, text="", fg_color="black")
        self.translate_camera_label.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

        # ==============

        self.translate_control_frame = ctk.CTkFrame(self.translate_frame, corner_radius=10)
        self.translate_control_frame.grid(row=1, column=0, padx=5, pady=5, sticky="ew")
        self.translate_control_frame.grid_columnconfigure((0, 6), weight=1, uniform="translate_control_frame_1")

        self.translate_control_result_entry = ctk.CTkEntry(self.translate_control_frame, border_width=1, corner_radius=0, height=25, width=800, state="readonly", justify="center")
        self.translate_control_result_entry.grid(row=0, column=0, columnspan=7, padx=10, pady=(10, 0))

        self.translate_control_time_limit_progressbar = ctk.CTkProgressBar(self.translate_control_frame, orientation="horizontal", corner_radius=0, height=5, width=800)
        self.translate_control_time_limit_progressbar.grid(row=1, column=0, columnspan=7, padx=10, pady=0)
        self.translate_control_time_limit_progressbar.set(0)

        self.translate_control_marker_button = ctk.CTkButton(self.translate_control_frame, corner_radius=10, border_spacing=0, height=55, width=85, text="Marker", image=self.marker_logo, fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), compound="top", anchor="center", font=self.font_11, command=self.translate_control_marker_button_event)
        self.translate_control_marker_button.grid(row=2, column=1, padx=0, pady=10)

        self.translate_control_restart_button = ctk.CTkButton(self.translate_control_frame, corner_radius=10, border_spacing=0, height=55, width=85, text="Restart", image=self.restart_logo, fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), compound="top", anchor="center", font=self.font_11, command=self.translate_control_restart_button_event)
        self.translate_control_restart_button.grid(row=2, column=2, padx=0, pady=10)

        self.translate_control_start_button = ctk.CTkButton(self.translate_control_frame, corner_radius=10, border_spacing=0, height=55, width=85, text="Start", image=self.start_logo, fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), compound="top", anchor="center", font=self.font_11, command=self.translate_control_start_button_event)
        self.translate_control_start_button.grid(row=2, column=3, padx=0, pady=10)

        self.translate_control_stop_button = ctk.CTkButton(self.translate_control_frame, corner_radius=10, border_spacing=0, height=55, width=85, text="Stop", image=self.stop_logo, fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), compound="top", anchor="center", font=self.font_11, command=self.translate_control_stop_button_event)
        self.translate_control_stop_button.grid(row=2, column=4, padx=0, pady=10)

        self.translate_control_erase_button = ctk.CTkButton(self.translate_control_frame, corner_radius=10, border_spacing=0, height=55, width=85, text="Erase", image=self.erase_logo, fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), compound="top", anchor="center", font=self.font_11, command=self.translate_control_erase_button_event)
        self.translate_control_erase_button.grid(row=2, column=5, padx=0, pady=10)

        # ==============

        self.translate_translation_frame = ctk.CTkFrame(self.translate_frame, corner_radius=10, width=300)
        self.translate_translation_frame.grid(row=0, column=1, rowspan=2, padx=5, pady=5, sticky="ns")
        self.translate_translation_frame.grid_rowconfigure(1, weight=1)
        self.translate_translation_frame.grid_columnconfigure(0, weight=1)
        self.translate_translation_frame.grid_propagate(False)

        self.translate_translation_label = ctk.CTkLabel(self.translate_translation_frame, text="Translation List:", anchor="w", font=self.font_17, height=17)
        self.translate_translation_label.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="nsew")

        self.translate_translation_textbox = ctk.CTkTextbox(self.translate_translation_frame, corner_radius=10, font=self.font_13, fg_color="transparent", wrap='word')
        self.translate_translation_textbox.grid(row=1, column=0, padx=(9, 0), pady=(0, 10), sticky="nsew")

        self.translate_translation_textbox.insert(ctk.END, "No Data")
        self.translate_translation_textbox.configure(state="disabled")

        self.progressbar_group.append(self.translate_control_time_limit_progressbar)
        
    def set_up_dataset_frame(self):
        self.dataset_control_frame = ctk.CTkFrame(self.dataset_frame, corner_radius=10)
        self.dataset_control_frame.grid(row=0, column=0, rowspan=2, padx=5, pady=5, sticky="nsew")
        self.dataset_control_frame.grid_columnconfigure((0, 1), weight=1, uniform="dataset_control_frame_1")

        self.dataset_control_label = ctk.CTkLabel(self.dataset_control_frame, text="Dataset Control:", anchor="w", font=self.font_17, height=17)
        self.dataset_control_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.dataset_control_type_label = ctk.CTkLabel(self.dataset_control_frame, text="Dataset Type:", anchor="w", font=self.font_13, height=13)
        self.dataset_control_type_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_control_type_list = ["Landmark File", "Image Folder"]

        self.dataset_control_type_optionmenu = ctk.CTkOptionMenu(self.dataset_control_frame, corner_radius=10, font=self.font_13, values=self.dataset_control_type_list, command=self.dataset_control_type_optionmenu_event)
        self.dataset_control_type_optionmenu.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.dataset_control_type_optionmenu.set(self.dataset_control_type_list[0])

        self.dataset_control_select_label = ctk.CTkLabel(self.dataset_control_frame, text="Select Dataset: ", anchor="w", font=self.font_13, height=13)
        self.dataset_control_select_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_control_select_button = ctk.CTkButton(self.dataset_control_frame, text="Select", corner_radius=10, font=self.font_13, command=self.dataset_control_select_button_event)
        self.dataset_control_select_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        
        self.dataset_control_create_label = ctk.CTkLabel(self.dataset_control_frame, text="Create New Dataset: ", anchor="w", font=self.font_13, height=13)
        self.dataset_control_create_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_control_create_button = ctk.CTkButton(self.dataset_control_frame, text="Create", corner_radius=10, font=self.font_13, command=self.dataset_control_create_button_event)
        self.dataset_control_create_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        
        self.dataset_control_delete_label = ctk.CTkLabel(self.dataset_control_frame, text="Delete Dataset: ", anchor="w", font=self.font_13, height=13)
        self.dataset_control_delete_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_control_delete_button = ctk.CTkButton(self.dataset_control_frame, text="Delete", corner_radius=10, font=self.font_13, command=self.dataset_control_delete_button_event)
        self.dataset_control_delete_button.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.dataset_selected_path_frame = ctk.CTkFrame(self.dataset_frame, corner_radius=10)
        self.dataset_selected_path_frame.grid(row=2, column=0, padx=5, pady=5, sticky="nsew")
        self.dataset_selected_path_frame.grid_columnconfigure((0, 1), weight=1, uniform="dataset_selected_file_frame_1")

        self.dataset_selected_path_label = ctk.CTkLabel(self.dataset_selected_path_frame, text="Selected Dataset:", anchor="w", font=self.font_17, height=17)
        self.dataset_selected_path_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.dataset_selected_path_name_label = ctk.CTkLabel(self.dataset_selected_path_frame, text="Dataset Path: ", anchor="w", font=self.font_13, height=13)
        self.dataset_selected_path_name_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_selected_path_name_entry = ctk.CTkEntry(self.dataset_selected_path_frame, border_width=1, corner_radius=10, state="readonly")
        self.dataset_selected_path_name_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_selected_path_clear_label = ctk.CTkLabel(self.dataset_selected_path_frame, text="Clear Path: ", anchor="w", font=self.font_13, height=13)
        self.dataset_selected_path_clear_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_selected_path_clear_button = ctk.CTkButton(self.dataset_selected_path_frame, text="Clear", corner_radius=10, font=self.font_13, command=self.dataset_selected_path_clear_button_event)
        self.dataset_selected_path_clear_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================
        
        self.dataset_word_list_frame = ctk.CTkFrame(self.dataset_frame, corner_radius=10)
        self.dataset_word_list_frame.grid(row=0, column=1, rowspan=3, padx=5, pady=5, sticky="nsew")
        self.dataset_word_list_frame.grid_rowconfigure(1, weight=1)
        self.dataset_word_list_frame.grid_columnconfigure(0, weight=1)

        self.dataset_word_list_label = ctk.CTkLabel(self.dataset_word_list_frame, text="Word List:", anchor="w", font=self.font_17, height=17)
        self.dataset_word_list_label.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="nsew")

        self.dataset_word_list_scrollableframe = ctk.CTkScrollableFrame(self.dataset_word_list_frame, corner_radius=10, fg_color="transparent")
        self.dataset_word_list_scrollableframe.grid(row=1, column=0, padx=0, pady=(0, 10), sticky="nsew")

        self.dataset_word_list_no_data_label = ctk.CTkLabel(self.dataset_word_list_scrollableframe, text="No Data", anchor="w", font=self.font_13, height=13)
        self.dataset_word_list_no_data_label.pack(padx=(9, 0), pady=0, fill="both")

        # ===================================================================================================

        self.dataset_selected_word_frame = ctk.CTkFrame(self.dataset_frame, corner_radius=10)
        self.dataset_selected_word_frame.grid(row=0, column=2, padx=5, pady=(5, 0), sticky="nsew")
        self.dataset_selected_word_frame.grid_columnconfigure((0, 1), weight=1, uniform="dataset_selected_word_frame_1")

        self.dataset_selected_word_label = ctk.CTkLabel(self.dataset_selected_word_frame, text="Selected Word:", anchor="w", font=self.font_17, height=17)
        self.dataset_selected_word_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.dataset_selected_word_name_label = ctk.CTkLabel(self.dataset_selected_word_frame, text="Word: ", anchor="w", font=self.font_13, height=13)
        self.dataset_selected_word_name_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_selected_word_name_entry = ctk.CTkEntry(self.dataset_selected_word_frame, border_width=1, corner_radius=10, state="readonly")
        self.dataset_selected_word_name_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_selected_word_clear_label = ctk.CTkLabel(self.dataset_selected_word_frame, text="Clear Word: ", anchor="w", font=self.font_13, height=13)
        self.dataset_selected_word_clear_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_selected_word_clear_button = ctk.CTkButton(self.dataset_selected_word_frame, text="Clear", corner_radius=10, font=self.font_13, command=self.dataset_selected_word_clear_button_event)
        self.dataset_selected_word_clear_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.dataset_edit_tabview = ctk.CTkTabview(self.dataset_frame, corner_radius=10)
        self.dataset_edit_tabview.grid(row=1, column=2, rowspan=2, padx=5, pady=(0, 5), sticky="nsew")
        
        self.dataset_edit_tabview.add("Add")
        self.dataset_edit_tabview.add("Delete")
        self.dataset_edit_tabview.add("Redata")
        self.dataset_edit_tabview.add("Relabel")

        self.dataset_edit_tabview.tab("Add").grid_columnconfigure((0, 1), weight=1, uniform="dataset_edit_tabview_1")
        self.dataset_edit_tabview.tab("Delete").grid_columnconfigure((0, 1), weight=1, uniform="dataset_edit_tabview_1")
        self.dataset_edit_tabview.tab("Redata").grid_columnconfigure((0, 1), weight=1, uniform="dataset_edit_tabview_1")
        self.dataset_edit_tabview.tab("Relabel").grid_columnconfigure((0, 1), weight=1, uniform="dataset_edit_tabview_1")

        # ===================================================================================================

        self.dataset_edit_add_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Add"), text="Add New Word:", anchor="w", font=self.font_17, height=17)
        self.dataset_edit_add_label.grid(row=0, column=0, columnspan=2, padx=7, pady=(7, 20), sticky="nsew")

        self.dataset_edit_add_word_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Add"), text="New Word:", anchor="w", font=self.font_13, height=13)
        self.dataset_edit_add_word_label.grid(row=1, column=0, padx=(7, 10), pady=(0, 20), sticky="nsew")

        self.dataset_edit_add_word_entry = ctk.CTkEntry(self.dataset_edit_tabview.tab("Add"), border_width=1, corner_radius=10)
        self.dataset_edit_add_word_entry.grid(row=1, column=1, padx=(10, 7), pady=(0, 20), sticky="nsew")

        self.dataset_edit_add_next_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Add"), text="Add Data: ", anchor="w", font=self.font_13, height=13)
        self.dataset_edit_add_next_label.grid(row=2, column=0, padx=(7, 10), pady=(0, 20), sticky="nsew")

        self.dataset_edit_add_next_button = ctk.CTkButton(self.dataset_edit_tabview.tab("Add"), text="Add", corner_radius=10, font=self.font_13, command=self.dataset_edit_add_next_button_event)
        self.dataset_edit_add_next_button.grid(row=2, column=1, padx=(10, 7), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.dataset_edit_delete_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Delete"), text="Delete Word:", anchor="w", font=self.font_17, height=17)
        self.dataset_edit_delete_label.grid(row=0, column=0, columnspan=2, padx=7, pady=(7, 20), sticky="nsew")

        self.dataset_edit_delete_word_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Delete"), text="Delete Selected Word: ", anchor="w", font=self.font_13, height=13)
        self.dataset_edit_delete_word_label.grid(row=1, column=0, padx=(7, 10), pady=(0, 20), sticky="nsew")

        self.dataset_edit_delete_word_button = ctk.CTkButton(self.dataset_edit_tabview.tab("Delete"), text="Delete", corner_radius=10, font=self.font_13, command=self.dataset_edit_delete_word_button_event)
        self.dataset_edit_delete_word_button.grid(row=1, column=1, padx=(10, 7), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.dataset_edit_redata_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Redata"), text="Redata Word:", anchor="w", font=self.font_17, height=17)
        self.dataset_edit_redata_label.grid(row=0, column=0, columnspan=2, padx=7, pady=(7, 20), sticky="nsew")

        self.dataset_edit_redata_change_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Redata"), text="Change Data: ", anchor="w", font=self.font_13, height=13)
        self.dataset_edit_redata_change_label.grid(row=1, column=0, padx=(7, 10), pady=(0, 20), sticky="nsew")

        self.dataset_edit_redata_change_button = ctk.CTkButton(self.dataset_edit_tabview.tab("Redata"), text="Change", corner_radius=10, font=self.font_13, command=self.dataset_edit_redata_change_button_event)
        self.dataset_edit_redata_change_button.grid(row=1, column=1, padx=(10, 7), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.dataset_edit_relabel_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Relabel"), text="Relabel Word:", anchor="w", font=self.font_17, height=17)
        self.dataset_edit_relabel_label.grid(row=0, column=0, columnspan=2, padx=7, pady=(7, 20), sticky="nsew")

        self.dataset_edit_relabel_word_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Relabel"), text="New Word:", anchor="w", font=self.font_13, height=13)
        self.dataset_edit_relabel_word_label.grid(row=1, column=0, padx=(7, 10), pady=(0, 20), sticky="nsew")

        self.dataset_edit_relabel_word_entry = ctk.CTkEntry(self.dataset_edit_tabview.tab("Relabel"), border_width=1, corner_radius=10)
        self.dataset_edit_relabel_word_entry.grid(row=1, column=1, padx=(10, 7), pady=(0, 20), sticky="nsew")

        self.dataset_edit_relabel_change_label = ctk.CTkLabel(self.dataset_edit_tabview.tab("Relabel"), text="Change Word: ", anchor="w", font=self.font_13, height=13)
        self.dataset_edit_relabel_change_label.grid(row=2, column=0, padx=(7, 10), pady=(0, 20), sticky="nsew")

        self.dataset_edit_relabel_change_button = ctk.CTkButton(self.dataset_edit_tabview.tab("Relabel"), text="Change", corner_radius=10, font=self.font_13, command=self.dataset_edit_relabel_change_button_event)
        self.dataset_edit_relabel_change_button.grid(row=2, column=1, padx=(10, 7), pady=(0, 20), sticky="nsew")

        self.button_group.extend([self.dataset_control_select_button, self.dataset_control_create_button, self.dataset_control_delete_button, self.dataset_selected_path_clear_button, self.dataset_selected_word_clear_button, self.dataset_edit_add_next_button, self.dataset_edit_delete_word_button, self.dataset_edit_redata_change_button, self.dataset_edit_relabel_change_button])
        self.optionmenu_group.append(self.dataset_control_type_optionmenu)
        self.tabview_group.append(self.dataset_edit_tabview)

    def set_up_training_frame(self):
        self.training_control_frame = ctk.CTkFrame(self.training_frame, corner_radius=10)
        self.training_control_frame.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
        self.training_control_frame.grid_columnconfigure((0, 1), weight=1, uniform="dataset_control_frame_1")

        self.training_control_label = ctk.CTkLabel(self.training_control_frame, text="Training Control:", anchor="w", font=self.font_17, height=17)
        self.training_control_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.training_control_select_label = ctk.CTkLabel(self.training_control_frame, text="Select Training: ", anchor="w", font=self.font_13, height=13)
        self.training_control_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_control_select_button = ctk.CTkButton(self.training_control_frame, text="Select", corner_radius=10, font=self.font_13, command=self.training_control_select_button_event)
        self.training_control_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        
        self.training_control_algorithm_label = ctk.CTkLabel(self.training_control_frame, text="Training Algorithm: ", anchor="w", font=self.font_13, height=13)
        self.training_control_algorithm_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_control_algorithm_landmark_list = ["Random Forest", "Decision Tree", "K-Nearest Neighbors", "Support Vector Machine", "Naive Bayes"]
        self.training_control_algorithm_image_list = ["Convolutional Neural Network"]

        self.training_control_algorithm_optionmenu = ctk.CTkOptionMenu(self.training_control_frame, corner_radius=10, font=self.font_13, values=self.training_control_algorithm_landmark_list)
        self.training_control_algorithm_optionmenu.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.training_control_algorithm_optionmenu.set(self.training_control_algorithm_landmark_list[0])

        self.training_control_train_label = ctk.CTkLabel(self.training_control_frame, text="Training Dataset: ", anchor="w", font=self.font_13, height=13)
        self.training_control_train_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_control_train_button = ctk.CTkButton(self.training_control_frame, text="Training", corner_radius=10, font=self.font_13, command=self.training_control_train_button_event)
        self.training_control_train_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.training_control_delete_path_label = ctk.CTkLabel(self.training_control_frame, text="Delete Training: ", anchor="w", font=self.font_13, height=13)
        self.training_control_delete_path_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_control_delete_path_button = ctk.CTkButton(self.training_control_frame, text="Delete", corner_radius=10, font=self.font_13, command=self.training_control_delete_path_button_event)
        self.training_control_delete_path_button.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.training_selected_path_frame = ctk.CTkFrame(self.training_frame, corner_radius=10)
        self.training_selected_path_frame.grid(row=1, column=0, padx=5, pady=5, sticky="nsew")
        self.training_selected_path_frame.grid_columnconfigure((0, 1), weight=1, uniform="training_selected_training_frame_1")

        self.training_selected_path_label = ctk.CTkLabel(self.training_selected_path_frame, text="Selected Training:", anchor="w", font=self.font_17, height=17)
        self.training_selected_path_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.training_selected_path_name_label = ctk.CTkLabel(self.training_selected_path_frame, text="Training Path/Link: ", anchor="w", font=self.font_13, height=13)
        self.training_selected_path_name_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_selected_path_name_entry = ctk.CTkEntry(self.training_selected_path_frame, border_width=1, corner_radius=10, state="readonly")
        self.training_selected_path_name_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.training_selected_path_type_label = ctk.CTkLabel(self.training_selected_path_frame, text="Training Type: ", anchor="w", font=self.font_13, height=13)
        self.training_selected_path_type_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_selected_path_type_entry = ctk.CTkEntry(self.training_selected_path_frame, border_width=1, corner_radius=10, state="readonly")
        self.training_selected_path_type_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.training_selected_path_clear_label = ctk.CTkLabel(self.training_selected_path_frame, text="Clear Training: ", anchor="w", font=self.font_13, height=13)
        self.training_selected_path_clear_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.training_selected_path_clear_button = ctk.CTkButton(self.training_selected_path_frame, text="Clear", corner_radius=10, font=self.font_13, command=self.training_selected_path_clear_button_event)
        self.training_selected_path_clear_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.training_graph_results_tabview = ctk.CTkTabview(self.training_frame, corner_radius=10)
        self.training_graph_results_tabview.grid(row=0, column=1, rowspan=2, columnspan=2, padx=5, pady=(0, 5), sticky="nsew")
        self.training_graph_results_tabview.grid_propagate(False)

        # ===================================================================================================

        self.training_graph_results_tabview.add("Classification Report")
        self.training_graph_results_tabview.add("Confusion Matrix")
        self.training_graph_results_tabview.add("Error Rate")
        self.training_graph_results_tabview.add("Epoch Loss")
        self.training_graph_results_tabview.add("Epoch Accuracy")

        self.training_graph_results_tabview.tab("Classification Report").grid_columnconfigure(0, weight=1)        
        self.training_graph_results_tabview.tab("Classification Report").grid_rowconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Confusion Matrix").grid_columnconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Confusion Matrix").grid_rowconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Error Rate").grid_columnconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Error Rate").grid_rowconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Epoch Loss").grid_columnconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Epoch Loss").grid_rowconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Epoch Accuracy").grid_columnconfigure(0, weight=1)
        self.training_graph_results_tabview.tab("Epoch Accuracy").grid_rowconfigure(0, weight=1)

        # ====================================
        # classification report

        self.training_graph_classification_report_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Classification Report"))
        self.training_graph_classification_report_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_classification_report_scrollableframe.grid_columnconfigure((0, 1, 2, 3, 4), weight=1, uniform="training_graph_classification_report_scrollableframe_1")

        self.training_graph_classification_report_label = ctk.CTkLabel(self.training_graph_classification_report_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_classification_report_label.grid(row=0, column=0, columnspan=5, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # confusion matrix

        self.training_graph_confusion_matrix_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Confusion Matrix"))
        self.training_graph_confusion_matrix_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_confusion_matrix_scrollableframe.grid_columnconfigure(0, weight=1)

        self.training_graph_confusion_matrix_label = ctk.CTkLabel(self.training_graph_confusion_matrix_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_confusion_matrix_label.grid(row=0, column=0, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # error rate

        self.training_graph_error_rate_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Error Rate"))
        self.training_graph_error_rate_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_error_rate_scrollableframe.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_graph_error_rate_scrollableframe_1")

        self.training_graph_error_rate_label = ctk.CTkLabel(self.training_graph_error_rate_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_error_rate_label.grid(row=0, column=0, columnspan=3, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # epoch loss

        self.training_graph_epoch_loss_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Epoch Loss"))
        self.training_graph_epoch_loss_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_epoch_loss_scrollableframe.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_graph_epoch_loss_scrollableframe_1")

        self.training_graph_epoch_loss_label = ctk.CTkLabel(self.training_graph_epoch_loss_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_epoch_loss_label.grid(row=0, column=0, columnspan=5, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # epoch Accuracy

        self.training_graph_epoch_accuracy_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Epoch Accuracy"))
        self.training_graph_epoch_accuracy_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_epoch_accuracy_scrollableframe.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_graph_epoch_accuracy_scrollableframe_1")

        self.training_graph_epoch_accuracy_label = ctk.CTkLabel(self.training_graph_epoch_accuracy_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_epoch_accuracy_label.grid(row=0, column=0, columnspan=5, padx=0, pady=(0, 20), sticky="nsew")

        self.button_group.extend([self.training_control_select_button, self.training_control_train_button, self.training_control_delete_path_button, self.training_selected_path_clear_button])
        self.optionmenu_group.append(self.training_control_algorithm_optionmenu)
        self.tabview_group.append(self.training_graph_results_tabview)

    def set_up_history_frame(self):
        self.history_control_frame = ctk.CTkFrame(self.history_frame)
        self.history_control_frame.grid(row=0, column=0, rowspan=2, padx=5, pady=5, sticky="nsew")
        self.history_control_frame.grid_columnconfigure((0, 1), weight=1, uniform="history_control_frame_1")

        self.history_control_label = ctk.CTkLabel(self.history_control_frame, text="History Control:", anchor="w", font=self.font_17, height=17)
        self.history_control_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.history_control_select_label = ctk.CTkLabel(self.history_control_frame, text="Select History: ", anchor="w", font=self.font_13, height=13)
        self.history_control_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_control_select_button = ctk.CTkButton(self.history_control_frame, text="Select", corner_radius=10, font=self.font_13, command=self.history_control_select_button_event)
        self.history_control_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        
        self.history_control_create_label = ctk.CTkLabel(self.history_control_frame, text="Create New History: ", anchor="w", font=self.font_13, height=13)
        self.history_control_create_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_control_create_button = ctk.CTkButton(self.history_control_frame, text="Create", corner_radius=10, font=self.font_13, command=self.history_control_create_button_event)
        self.history_control_create_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        
        self.history_control_delete_label = ctk.CTkLabel(self.history_control_frame, text="Delete History: ", anchor="w", font=self.font_13, height=13)
        self.history_control_delete_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_control_delete_button = ctk.CTkButton(self.history_control_frame, text="Delete", corner_radius=10, font=self.font_13, command=self.history_control_delete_button_event)
        self.history_control_delete_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.history_selected_path_frame = ctk.CTkFrame(self.history_frame)
        self.history_selected_path_frame.grid(row=2, column=0, padx=5, pady=5, sticky="nsew")
        self.history_selected_path_frame.grid_columnconfigure((0, 1), weight=1, uniform="history_selected_path_frame_1")

        self.history_selected_path_label = ctk.CTkLabel(self.history_selected_path_frame, text="Selected History:", anchor="w", font=self.font_17, height=17)
        self.history_selected_path_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.history_selected_path_name_label = ctk.CTkLabel(self.history_selected_path_frame, text="History Path: ", anchor="w", font=self.font_13, height=13)
        self.history_selected_path_name_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_selected_path_name_entry = ctk.CTkEntry(self.history_selected_path_frame, border_width=1, corner_radius=10, state="readonly")
        self.history_selected_path_name_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.history_selected_path_clear_label = ctk.CTkLabel(self.history_selected_path_frame, text="Clear Path: ", anchor="w", font=self.font_13, height=13)
        self.history_selected_path_clear_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_selected_path_clear_button = ctk.CTkButton(self.history_selected_path_frame, text="Clear", corner_radius=10, font=self.font_13, command=self.history_selected_path_clear_button_event)
        self.history_selected_path_clear_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.history_list_frame = ctk.CTkFrame(self.history_frame)
        self.history_list_frame.grid(row=0, column=1, rowspan=3, padx=5, pady=5, sticky="nsew")
        self.history_list_frame.grid_rowconfigure(1, weight=1)
        self.history_list_frame.grid_columnconfigure(0, weight=1)

        self.history_list_label = ctk.CTkLabel(self.history_list_frame, text="History List:", anchor="w", font=self.font_17, height=17)
        self.history_list_label.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="nsew")

        self.history_list_scrollableframe = ctk.CTkScrollableFrame(self.history_list_frame, corner_radius=10, fg_color="transparent")
        self.history_list_scrollableframe.grid(row=1, column=0, padx=0, pady=(0, 10), sticky="nsew")

        self.history_list_no_data_label = ctk.CTkLabel(self.history_list_scrollableframe, text="No Data", anchor="w", font=self.font_13, height=13)
        self.history_list_no_data_label.pack(padx=(9, 0), pady=0, fill="both")

        # ===================================================================================================

        self.history_selected_translation_frame = ctk.CTkFrame(self.history_frame)
        self.history_selected_translation_frame.grid(row=0, column=2, padx=5, pady=5, sticky="nsew")
        self.history_selected_translation_frame.grid_columnconfigure((0, 1), weight=1, uniform="history_selected_translation_frame_1")

        self.history_selected_translation_label = ctk.CTkLabel(self.history_selected_translation_frame, text="Selected History Translation:", anchor="w", font=self.font_17, height=17)
        self.history_selected_translation_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.history_selected_translation_datetime_label = ctk.CTkLabel(self.history_selected_translation_frame, text="Date Time: ", anchor="w", font=self.font_13, height=13)
        self.history_selected_translation_datetime_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_selected_translation_datetime_entry = ctk.CTkEntry(self.history_selected_translation_frame, border_width=1, corner_radius=10, state="readonly")
        self.history_selected_translation_datetime_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.history_selected_translation_clear_label = ctk.CTkLabel(self.history_selected_translation_frame, text="Clear Date Time: ", anchor="w", font=self.font_13, height=13)
        self.history_selected_translation_clear_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_selected_translation_clear_button = ctk.CTkButton(self.history_selected_translation_frame, text="Clear", corner_radius=10, font=self.font_13, command=self.history_selected_translation_clear_button_event)
        self.history_selected_translation_clear_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.history_selected_translation_delete_label = ctk.CTkLabel(self.history_selected_translation_frame, text="Delete Date Time: ", anchor="w", font=self.font_13, height=13)
        self.history_selected_translation_delete_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.history_selected_translation_delete_button = ctk.CTkButton(self.history_selected_translation_frame, text="Delete", corner_radius=10, font=self.font_13, command=self.history_selected_translation_delete_button_event)
        self.history_selected_translation_delete_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        # ===================================================================================================

        self.history_translation_frame = ctk.CTkFrame(self.history_frame)
        self.history_translation_frame.grid(row=1, column=2, rowspan=2, padx=5, pady=5, sticky="nsew")
        self.history_translation_frame.grid_rowconfigure(1, weight=1)
        self.history_translation_frame.grid_columnconfigure(0, weight=1)
        self.history_translation_frame.grid_propagate(False)

        self.history_translation_label = ctk.CTkLabel(self.history_translation_frame, text="Translation List:", anchor="w", font=self.font_17, height=17)
        self.history_translation_label.grid(row=0, column=0, padx=20, pady=(20, 10), sticky="nsew")

        self.history_translation_textbox = ctk.CTkTextbox(self.history_translation_frame, corner_radius=10, font=self.font_13, fg_color="transparent", wrap='word')
        self.history_translation_textbox.grid(row=1, column=0, padx=(9, 0), pady=(0, 10), sticky="nsew")

        self.history_translation_textbox.insert(ctk.END, "No Data")
        self.history_translation_textbox.configure(state="disabled")

        self.button_group.extend([self.history_control_select_button, self.history_control_create_button, self.history_control_delete_button, self.history_selected_path_clear_button, self.history_selected_translation_clear_button, self.history_selected_translation_delete_button])

    def set_up_setting_frame(self):
        self.setting_application_frame = ctk.CTkFrame(self.setting_frame)
        self.setting_application_frame.grid(row=0, column=0, rowspan=2, padx=5, pady=5, sticky="nsew")
        self.setting_application_frame.grid_columnconfigure((0, 1), weight=1, uniform="setting_application_frame_1")

        self.setting_application_label = ctk.CTkLabel(self.setting_application_frame, text="Setting Application:", anchor="w", font=self.font_17, height=17)
        self.setting_application_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.setting_application_appearance_mode_list = ["System", "Dark", "Light"]

        self.setting_application_appearance_mode_label = ctk.CTkLabel(self.setting_application_frame, text="Appearance Mode:", anchor="w", font=self.font_13, height=13)
        self.setting_application_appearance_mode_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_application_appearance_mode_optionmenu = ctk.CTkOptionMenu(self.setting_application_frame, corner_radius=10, font=self.font_13, values=self.setting_application_appearance_mode_list, command=self.setting_application_appearance_mode_optionmenu_event)
        self.setting_application_appearance_mode_optionmenu.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.setting_application_appearance_mode_optionmenu.set(self.setting_application_appearance_mode_list[0])

        self.setting_application_color_theme_list = ["Green", "Blue", "Dark Blue"]

        self.setting_application_color_theme_label = ctk.CTkLabel(self.setting_application_frame, text="Color Theme:", anchor="w", font=self.font_13, height=13)
        self.setting_application_color_theme_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_application_color_theme_optionmenu = ctk.CTkOptionMenu(self.setting_application_frame, corner_radius=10, font=self.font_13, values=self.setting_application_color_theme_list, command=self.setting_application_color_theme_optionmenu_event)
        self.setting_application_color_theme_optionmenu.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.setting_application_color_theme_optionmenu.set(self.setting_application_color_theme_list[0])

        # ===================================================================================================

        self.setting_landmark_frame = ctk.CTkFrame(self.setting_frame)
        self.setting_landmark_frame.grid(row=0, column=1, rowspan=2, padx=5, pady=5, sticky="nsew")
        self.setting_landmark_frame.grid_columnconfigure((0, 1), weight=1, uniform="setting_landmark_frame_1")

        self.setting_landmark_label = ctk.CTkLabel(self.setting_landmark_frame, text="Setting Landmark:", anchor="w", font=self.font_17, height=17)
        self.setting_landmark_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.setting_landmark_right_hand_label = ctk.CTkLabel(self.setting_landmark_frame, text="Right Hand landmark: ", anchor="w", font=self.font_13, height=13)
        self.setting_landmark_right_hand_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_landmark_right_hand_switch = ctk.CTkSwitch(self.setting_landmark_frame, text="")
        self.setting_landmark_right_hand_switch.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.setting_landmark_left_hand_label = ctk.CTkLabel(self.setting_landmark_frame, text="Left Hand landmark: ", anchor="w", font=self.font_13, height=13)
        self.setting_landmark_left_hand_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_landmark_left_hand_switch = ctk.CTkSwitch(self.setting_landmark_frame, text="")
        self.setting_landmark_left_hand_switch.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.setting_landmark_face_label = ctk.CTkLabel(self.setting_landmark_frame, text="Face landmark: ", anchor="w", font=self.font_13, height=13)
        self.setting_landmark_face_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_landmark_face_switch = ctk.CTkSwitch(self.setting_landmark_frame, text="")
        self.setting_landmark_face_switch.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.setting_landmark_pose_label = ctk.CTkLabel(self.setting_landmark_frame, text="Pose landmark: ", anchor="w", font=self.font_13, height=13)
        self.setting_landmark_pose_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_landmark_pose_switch = ctk.CTkSwitch(self.setting_landmark_frame, text="")
        self.setting_landmark_pose_switch.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        # ===================================================================================================

        self.setting_box_frame = ctk.CTkFrame(self.setting_frame)
        self.setting_box_frame.grid(row=0, column=2, rowspan=2, padx=5, pady=5, sticky="nsew")
        self.setting_box_frame.grid_columnconfigure((0, 1), weight=1, uniform="setting_box_frame_1")

        self.setting_box_label = ctk.CTkLabel(self.setting_box_frame, text="Setting Box:", anchor="w", font=self.font_17, height=17)
        self.setting_box_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.setting_box_right_hand_label = ctk.CTkLabel(self.setting_box_frame, text="Right Hand Box: ", anchor="w", font=self.font_13, height=13)
        self.setting_box_right_hand_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_box_right_hand_switch = ctk.CTkSwitch(self.setting_box_frame, text="")
        self.setting_box_right_hand_switch.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.setting_box_left_hand_label = ctk.CTkLabel(self.setting_box_frame, text="Left Hand Box: ", anchor="w", font=self.font_13, height=13)
        self.setting_box_left_hand_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_box_left_hand_switch = ctk.CTkSwitch(self.setting_box_frame, text="")
        self.setting_box_left_hand_switch.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.setting_box_face_label = ctk.CTkLabel(self.setting_box_frame, text="Face Box: ", anchor="w", font=self.font_13, height=13)
        self.setting_box_face_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_box_face_switch = ctk.CTkSwitch(self.setting_box_frame, text="")
        self.setting_box_face_switch.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.setting_box_pose_label = ctk.CTkLabel(self.setting_box_frame, text="Pose Box: ", anchor="w", font=self.font_13, height=13)
        self.setting_box_pose_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.setting_box_pose_switch = ctk.CTkSwitch(self.setting_box_frame, text="")
        self.setting_box_pose_switch.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.switch_group.extend([self.setting_landmark_right_hand_switch, self.setting_landmark_left_hand_switch, self.setting_landmark_face_switch, self.setting_landmark_pose_switch, self.setting_box_right_hand_switch, self.setting_box_left_hand_switch, self.setting_box_face_switch, self.setting_box_pose_switch])
        self.optionmenu_group.extend([self.setting_application_appearance_mode_optionmenu, self.setting_application_color_theme_optionmenu])

    def set_up_tutorial_frame(self):
        self.tutorial_content_frame = ctk.CTkScrollableFrame(self.tutorial_frame, corner_radius=10)
        self.tutorial_content_frame.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

# -------------------------------------------------

        self.tutorial_home_text = '''On the home page, you can select the dataset, training, history, settings, and translate pages using the buttons provided.'''

        self.tutorial_home_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Home", anchor="w", font=self.font_17, height=17)
        self.tutorial_home_title_label.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")

        self.tutorial_home_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_home_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_home_text_label.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_home_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="",  anchor="w", image=self.home_image)
        self.tutorial_home_image_label.grid(row=2, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------
        
        self.tutorial_translate_text = '''On the translate page, you can translate sign language using the training file on the training page. So the translation process cannot 
run without training files. Meanwhile, for history, if you use the history file on the history page, you can save the translation 
results in that file. However, if you don't use a history file, the translation results will not be saved.'''

        self.tutorial_translate_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Translate", anchor="w", font=self.font_17, height=17)
        self.tutorial_translate_title_label.grid(row=3, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_translate_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_translate_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_translate_text_label.grid(row=4, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_translate_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.translate_image)
        self.tutorial_translate_image_label.grid(row=5, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_dataset_add_text= '''On the dataset page, you can select, create, delete dataset files based on their type. From the selected dataset file, you can add 
new words based on the dataset type. You will be directed to the landmark data retrieval page if your dataset type is landmark or 
image data if your dataset type is image.'''

        self.tutorial_dataset_add_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Dataset Add", anchor="w", font=self.font_17, height=17)
        self.tutorial_dataset_add_title_label.grid(row=6, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_add_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_dataset_add_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_dataset_add_text_label.grid(row=7, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_add_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.dataset_add_image)
        self.tutorial_dataset_add_image_label.grid(row=8, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_dataset_delete_text = '''Apart from that, you can delete certain data from the selected dataset. So, labels and landmark data will be deleted for landmark 
type datasets. For the image type, the label folder containing the image will be deleted.'''

        self.tutorial_dataset_delete_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Dataset Delete", anchor="w", font=self.font_17, height=17)
        self.tutorial_dataset_delete_title_label.grid(row=9, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_delete_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_dataset_delete_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_dataset_delete_text_label.grid(row=10, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_delete_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.dataset_delete_image)
        self.tutorial_dataset_delete_image_label.grid(row=11, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_dataset_redata_text = '''Apart from that, you can change certain data in the selected dataset file. You can change the landmark or image dataset based on 
the selected words/labels.'''

        self.tutorial_dataset_redata_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Dataset Redata", anchor="w", font=self.font_17, height=17)
        self.tutorial_dataset_redata_title_label.grid(row=12, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_redata_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_dataset_redata_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_dataset_redata_text_label.grid(row=13, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_redata_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.dataset_redata_image)
        self.tutorial_dataset_redata_image_label.grid(row=14, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_dataset_relabel_text = '''Apart from that, you can change the words/labels in the selected dataset, by selecting the label and giving the label a new name.'''

        self.tutorial_dataset_relabel_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Dataset Relabel", anchor="w", font=self.font_17, height=17)
        self.tutorial_dataset_relabel_title_label.grid(row=15, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_relabel_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_dataset_relabel_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_dataset_relabel_text_label.grid(row=16, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_dataset_relabel_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.dataset_relabel_image)
        self.tutorial_dataset_relabel_image_label.grid(row=17, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_training_classification_report_text = '''On the training page, you can select, train, and delete training files. If you want to do training, you must include 
the dataset file on the dataset page, and select an algorithm. For landmark type datasets, we provide Random Forest, 
Decision Tree, K-Nearest Neighbors, Support Vector Machine, and Naive Bayes algorithms. For image type datasets, we 
provide a Convolutional Neural Network algorithm. You can also see graphic and table results from your 
classification report model training.'''

        self.tutorial_training_classification_report_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Training Classification Report", anchor="w", font=self.font_17, height=17)
        self.tutorial_training_classification_report_title_label.grid(row=18, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_classification_report_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_training_classification_report_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_training_classification_report_text_label.grid(row=19, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_classification_report_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.training_classification_report_image)
        self.tutorial_training_classification_report_image_label.grid(row=20, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_training_confusion_matrix_text = '''Apart from that, you can see the confusion matrix results from the selected training files.'''

        self.tutorial_training_confusion_matrix_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Training Confusion Matrix", anchor="w", font=self.font_17, height=17)
        self.tutorial_training_confusion_matrix_title_label.grid(row=21, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_confusion_matrix_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_training_confusion_matrix_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_training_confusion_matrix_text_label.grid(row=22, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_confusion_matrix_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.training_confusion_matrix_image)
        self.tutorial_training_confusion_matrix_image_label.grid(row=23, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_training_error_rate_text = '''Apart from that, you can see the error rate results from the selected training files. However, the error rate can only appear 
for training files that use landmark type datasets, meaning for the Random Forest, Decision Tree, K-Nearest Neighbors, Support 
Vector Machine, and Naive Bayes algorithms.'''

        self.tutorial_training_error_rate_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Training Error Rate", anchor="w", font=self.font_17, height=17)
        self.tutorial_training_error_rate_title_label.grid(row=24, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_error_rate_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_training_error_rate_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_training_error_rate_text_label.grid(row=25, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_error_rate_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.training_error_rate_image)
        self.tutorial_training_error_rate_image_label.grid(row=26, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_training_epoch_loss_text = '''Apart from that, you can see the epoch loss results of the selected training files. However, epoch loss can only appear for 
training files that use image type datasets, meaning for Convolutional Neural Network algorithms.'''

        self.tutorial_training_epoch_loss_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Training Epoch Loss", anchor="w", font=self.font_17, height=17)
        self.tutorial_training_epoch_loss_title_label.grid(row=27, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_epoch_loss_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_training_epoch_loss_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_training_epoch_loss_text_label.grid(row=28, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_epoch_loss_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.training_epoch_loss_image)
        self.tutorial_training_epoch_loss_image_label.grid(row=29, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_training_epoch_accuracy_text = '''Apart from that, you can see the epoch accuracy results of the selected training files. However, epoch accuracy can only 
appear for training files that use image type datasets, meaning for Convolutional Neural Network algorithms.'''

        self.tutorial_training_epoch_accuracy_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Training Epoch Accuracy", anchor="w", font=self.font_17, height=17)
        self.tutorial_training_epoch_accuracy_title_label.grid(row=30, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_epoch_accuracy_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_training_epoch_accuracy_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_training_epoch_accuracy_text_label.grid(row=31, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_training_epoch_accuracy_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.training_epoch_accuracy_image)
        self.tutorial_training_epoch_accuracy_image_label.grid(row=32, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_history_text = '''On the history page, you can select, create, delete history files. You can also delete certain translations in the history file.'''

        self.tutorial_history_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="History", anchor="w", font=self.font_17, height=17)
        self.tutorial_history_title_label.grid(row=33, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_history_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_history_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_history_text_label.grid(row=34, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_history_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.history_image)
        self.tutorial_history_image_label.grid(row=35, column=0, padx=20, pady=(0, 50), sticky="nsew")

# -------------------------------------------------

        self.tutorial_setting_text = '''On the settings page, you can set the appearance mode and color theme of the application. Apart from that, you can also turn on the 
landmark and bounding box switches to activate any markers that can appear in the frame.'''

        self.tutorial_setting_title_label = ctk.CTkLabel(self.tutorial_content_frame, text="Setting", anchor="w", font=self.font_17, height=17)
        self.tutorial_setting_title_label.grid(row=36, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_setting_text_label = ctk.CTkLabel(self.tutorial_content_frame, text=self.tutorial_setting_text, anchor="w", justify="left", font=self.font_13)
        self.tutorial_setting_text_label.grid(row=37, column=0, padx=20, pady=(0, 20), sticky="nsew")

        self.tutorial_setting_image_label = ctk.CTkLabel(self.tutorial_content_frame, text="", anchor="w", image=self.setting_image)
        self.tutorial_setting_image_label.grid(row=38, column=0, padx=20, pady=(0, 20), sticky="nsew")                                                                             

    def set_up_dataset_add_frame(self):
        self.dataset_add_camera_label = ctk.CTkLabel(self.dataset_add_frame, corner_radius=0, width=640, height=480, text="", fg_color="black")
        self.dataset_add_camera_label.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

        # ================================================================================================================

        self.dataset_add_result_frame = ctk.CTkFrame(self.dataset_add_frame, corner_radius=10)
        self.dataset_add_result_frame.grid(row=1, column=0, padx=5, pady=5, sticky="ew")
        self.dataset_add_result_frame.grid_columnconfigure(0, weight=1)

        self.dataset_add_result_progressbar = ctk.CTkProgressBar(self.dataset_add_result_frame, orientation="horizontal", corner_radius=0, height=5)
        self.dataset_add_result_progressbar.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.dataset_add_result_progressbar.set(0)

        self.dataset_add_result_label = ctk.CTkLabel(self.dataset_add_result_frame, text=f"Progress: {0}%   |   Data Amount: {0} Data", anchor="center", font=self.font_13, height=13)
        self.dataset_add_result_label.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="nsew")

        # ================================================================================================================

        self.dataset_add_control_frame = ctk.CTkFrame(self.dataset_add_frame, corner_radius=10, width=300)
        self.dataset_add_control_frame.grid(row=0, column=1, rowspan=2, padx=5, pady=5, sticky="ns")
        self.dataset_add_control_frame.grid_columnconfigure((0, 1), weight=1, uniform="dataset_add_control_frame_1")
        self.dataset_add_control_frame.grid_propagate(False)

        self.dataset_add_control_label = ctk.CTkLabel(self.dataset_add_control_frame, text="Add Control:", anchor="w", font=self.font_17, height=17)
        self.dataset_add_control_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.dataset_add_word_label = ctk.CTkLabel(self.dataset_add_control_frame, text="New Word: ", anchor="w", font=self.font_13, height=13)
        self.dataset_add_word_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_add_word_entry = ctk.CTkEntry(self.dataset_add_control_frame, border_width=1, corner_radius=10, state="readonly")
        self.dataset_add_word_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_add_start_label = ctk.CTkLabel(self.dataset_add_control_frame, text="Start Adding Data: ", anchor="w", font=self.font_13, height=13)
        self.dataset_add_start_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_add_start_button = ctk.CTkButton(self.dataset_add_control_frame, text="Start", corner_radius=10, font=self.font_13, command=self.dataset_add_start_button_event)
        self.dataset_add_start_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_add_stop_label = ctk.CTkLabel(self.dataset_add_control_frame, text="Stop Adding Data: ", anchor="w", font=self.font_13, height=13)
        self.dataset_add_stop_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_add_stop_button = ctk.CTkButton(self.dataset_add_control_frame, text="Stop", corner_radius=10, font=self.font_13, command=self.dataset_add_stop_button_event)
        self.dataset_add_stop_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_add_marker_label = ctk.CTkLabel(self.dataset_add_control_frame, text="Marker: ", anchor="w", font=self.font_13, height=13)
        self.dataset_add_marker_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_add_marker_switch = ctk.CTkSwitch(self.dataset_add_control_frame, text="")
        self.dataset_add_marker_switch.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.button_group.extend([self.dataset_add_start_button, self.dataset_add_stop_button])
        self.switch_group.append(self.dataset_add_marker_switch)
        self.progressbar_group.append(self.dataset_add_result_progressbar)

    def set_up_dataset_redata_frame(self):
        self.dataset_redata_camera_label = ctk.CTkLabel(self.dataset_redata_frame, corner_radius=0, width=640, height=480, text="", fg_color="black")
        self.dataset_redata_camera_label.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

        # ================================================================================================================

        self.dataset_redata_result_frame = ctk.CTkFrame(self.dataset_redata_frame, corner_radius=10)
        self.dataset_redata_result_frame.grid(row=1, column=0, padx=5, pady=5, sticky="ew")
        self.dataset_redata_result_frame.grid_columnconfigure(0, weight=1)

        self.dataset_redata_result_progressbar = ctk.CTkProgressBar(self.dataset_redata_result_frame, orientation="horizontal", corner_radius=0, height=5)
        self.dataset_redata_result_progressbar.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        self.dataset_redata_result_progressbar.set(0)

        self.dataset_redata_result_label = ctk.CTkLabel(self.dataset_redata_result_frame, text=f"Progress: {0}%   |   Data Amount: {0} Data", anchor="center", font=self.font_13, height=13)
        self.dataset_redata_result_label.grid(row=1, column=0, padx=20, pady=(0, 20), sticky="nsew")

        # ================================================================================================================

        self.dataset_redata_control_frame = ctk.CTkFrame(self.dataset_redata_frame, corner_radius=10, width=300)
        self.dataset_redata_control_frame.grid(row=0, column=1, rowspan=2, padx=5, pady=5, sticky="ns")
        self.dataset_redata_control_frame.grid_columnconfigure((0, 1), weight=1, uniform="dataset_redata_control_frame_1")
        self.dataset_redata_control_frame.grid_propagate(False)

        self.dataset_redata_control_label = ctk.CTkLabel(self.dataset_redata_control_frame, text="Redata Control:", anchor="w", font=self.font_17, height=17)
        self.dataset_redata_control_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.dataset_redata_word_label = ctk.CTkLabel(self.dataset_redata_control_frame, text="Word: ", anchor="w", font=self.font_13, height=13)
        self.dataset_redata_word_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_redata_word_entry = ctk.CTkEntry(self.dataset_redata_control_frame, border_width=1, corner_radius=10, state="readonly")
        self.dataset_redata_word_entry.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_redata_start_label = ctk.CTkLabel(self.dataset_redata_control_frame, text="Start Changing Data: ", anchor="w", font=self.font_13, height=13)
        self.dataset_redata_start_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_redata_start_button = ctk.CTkButton(self.dataset_redata_control_frame, text="Start", corner_radius=10, font=self.font_13, command=self.dataset_redata_start_button_event)
        self.dataset_redata_start_button.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_redata_stop_label = ctk.CTkLabel(self.dataset_redata_control_frame, text="Stop Changing Data: ", anchor="w", font=self.font_13, height=13)
        self.dataset_redata_stop_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_redata_stop_button = ctk.CTkButton(self.dataset_redata_control_frame, text="Stop", corner_radius=10, font=self.font_13, command=self.dataset_redata_stop_button_event)
        self.dataset_redata_stop_button.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.dataset_redata_marker_label = ctk.CTkLabel(self.dataset_redata_control_frame, text="Marker: ", anchor="w", font=self.font_13, height=13)
        self.dataset_redata_marker_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.dataset_redata_marker_switch = ctk.CTkSwitch(self.dataset_redata_control_frame, text="")
        self.dataset_redata_marker_switch.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="w")

        self.button_group.extend([self.dataset_redata_start_button, self.dataset_redata_stop_button])
        self.switch_group.append(self.dataset_redata_marker_switch)
        self.progressbar_group.append(self.dataset_redata_result_progressbar)

    def set_up_form_create_dataset(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x272+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_dataset_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_dataset_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_dataset_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_dataset_top_level_frame_1")
        self.form_create_dataset_top_level_frame.grid_rowconfigure((0, 1, 2, 3, 4), weight=1, uniform="form_create_dataset_top_level_frame_2")

        self.form_create_dataset_top_level_label = ctk.CTkLabel(self.form_create_dataset_top_level_frame, text="Create Dataset:", anchor="w", font=self.font_17, height=17)
        self.form_create_dataset_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_dataset_top_level_select_label = ctk.CTkLabel(self.form_create_dataset_top_level_frame, text="Select Directory: ", anchor="w", font=self.font_13, height=13)
        self.form_create_dataset_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_select_button = ctk.CTkButton(self.form_create_dataset_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_dataset_top_level_select_button_event)
        self.form_create_dataset_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_selected_label = ctk.CTkLabel(self.form_create_dataset_top_level_frame, text="Selected Directoy: ", anchor="w", font=self.font_13, height=13)
        self.form_create_dataset_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_selected_entry = ctk.CTkEntry(self.form_create_dataset_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_dataset_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_name_label = ctk.CTkLabel(self.form_create_dataset_top_level_frame, text="Dataset Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_dataset_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_name_entry = ctk.CTkEntry(self.form_create_dataset_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_dataset_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_create_label = ctk.CTkLabel(self.form_create_dataset_top_level_frame, text="Create Dataset: ", anchor="w", font=self.font_13, height=13)
        self.form_create_dataset_top_level_create_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_dataset_top_level_create_button = ctk.CTkButton(self.form_create_dataset_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_dataset_top_level_create_button_event)
        self.form_create_dataset_top_level_create_button.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_button_group.extend([self.form_create_dataset_top_level_select_button, self.form_create_dataset_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_history(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x272+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_history_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_history_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_history_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_history_top_level_frame_1")
        self.form_create_history_top_level_frame.grid_rowconfigure((0, 1, 2, 3, 4), weight=1, uniform="form_create_history_top_level_frame_2")

        self.form_create_history_top_level_label = ctk.CTkLabel(self.form_create_history_top_level_frame, text="Create History:", anchor="w", font=self.font_17, height=17)
        self.form_create_history_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_history_top_level_select_label = ctk.CTkLabel(self.form_create_history_top_level_frame, text="Select Directory: ", anchor="w", font=self.font_13, height=13)
        self.form_create_history_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_select_button = ctk.CTkButton(self.form_create_history_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_history_top_level_select_button_event)
        self.form_create_history_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_selected_label = ctk.CTkLabel(self.form_create_history_top_level_frame, text="Selected Directoy: ", anchor="w", font=self.font_13, height=13)
        self.form_create_history_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_selected_entry = ctk.CTkEntry(self.form_create_history_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_history_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_name_label = ctk.CTkLabel(self.form_create_history_top_level_frame, text="History Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_history_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_name_entry = ctk.CTkEntry(self.form_create_history_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_history_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_create_label = ctk.CTkLabel(self.form_create_history_top_level_frame, text="Create History: ", anchor="w", font=self.font_13, height=13)
        self.form_create_history_top_level_create_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_history_top_level_create_button = ctk.CTkButton(self.form_create_history_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_history_top_level_create_button_event)
        self.form_create_history_top_level_create_button.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_button_group.extend([self.form_create_history_top_level_select_button, self.form_create_history_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_training_random_forest(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x432+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_training_random_forest_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_training_random_forest_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_training_random_forest_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_training_random_forest_top_level_frame_1")

        self.form_create_training_random_forest_top_level_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="Random Forest:", anchor="w", font=self.font_17, height=17)
        self.form_create_training_random_forest_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_training_random_forest_top_level_select_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="Select Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_random_forest_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_select_button = ctk.CTkButton(self.form_create_training_random_forest_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_training_random_forest_top_level_select_button_event)
        self.form_create_training_random_forest_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_selected_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_random_forest_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_selected_entry = ctk.CTkEntry(self.form_create_training_random_forest_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_training_random_forest_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_name_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="File Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_random_forest_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_name_entry = ctk.CTkEntry(self.form_create_training_random_forest_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_random_forest_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_random_state_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="Random State: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_random_forest_top_level_random_state_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_random_state_entry = ctk.CTkEntry(self.form_create_training_random_forest_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_random_forest_top_level_random_state_entry.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_random_forest_top_level_random_state_entry.insert(0, "1234")

        self.form_create_training_random_forest_top_level_n_estimators_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="N-Estimators (100, N): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_random_forest_top_level_n_estimators_label.grid(row=5, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_n_estimators_entry = ctk.CTkEntry(self.form_create_training_random_forest_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_random_forest_top_level_n_estimators_entry.grid(row=5, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_random_forest_top_level_n_estimators_entry.insert(0, "150")

        self.form_create_training_random_forest_top_level_create_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text="Create File: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_random_forest_top_level_create_label.grid(row=6, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_create_button = ctk.CTkButton(self.form_create_training_random_forest_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_training_random_forest_top_level_create_button_event)
        self.form_create_training_random_forest_top_level_create_button.grid(row=6, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_random_forest_top_level_progress_progressbar = ctk.CTkProgressBar(self.form_create_training_random_forest_top_level_frame, orientation='horizontal', corner_radius=0, height=5)
        self.form_create_training_random_forest_top_level_progress_progressbar.grid(row=7, column=0, columnspan=2, padx=20, pady=0, sticky="ew")
        self.form_create_training_random_forest_top_level_progress_progressbar.set(0)

        self.form_create_training_random_forest_top_level_progress_label = ctk.CTkLabel(self.form_create_training_random_forest_top_level_frame, text=f"Training with {0} estimators", anchor="center", justify="center", font=self.font_13, height=13, wraplength=460)
        self.form_create_training_random_forest_top_level_progress_label.grid(row=8, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_button_group.extend([self.form_create_training_random_forest_top_level_select_button, self.form_create_training_random_forest_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_training_decision_tree(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x432+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_training_decision_tree_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_training_decision_tree_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_training_decision_tree_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_training_decision_tree_top_level_frame_1")

        self.form_create_training_decision_tree_top_level_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="Decision Tree:", anchor="w", font=self.font_17, height=17)
        self.form_create_training_decision_tree_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_training_decision_tree_top_level_select_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="Select Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_decision_tree_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_select_button = ctk.CTkButton(self.form_create_training_decision_tree_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_training_decision_tree_top_level_select_button_event)
        self.form_create_training_decision_tree_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_selected_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_decision_tree_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_selected_entry = ctk.CTkEntry(self.form_create_training_decision_tree_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_training_decision_tree_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_name_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="File Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_decision_tree_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_name_entry = ctk.CTkEntry(self.form_create_training_decision_tree_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_decision_tree_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_random_state_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="Random State: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_decision_tree_top_level_random_state_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_random_state_entry = ctk.CTkEntry(self.form_create_training_decision_tree_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_decision_tree_top_level_random_state_entry.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_decision_tree_top_level_random_state_entry.insert(0, "1234")

        self.form_create_training_decision_tree_top_level_max_depth_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="Max Depth (0 = None, N): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_decision_tree_top_level_max_depth_label.grid(row=5, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_max_depth_entry = ctk.CTkEntry(self.form_create_training_decision_tree_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_decision_tree_top_level_max_depth_entry.grid(row=5, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_decision_tree_top_level_max_depth_entry.insert(0, "100")

        self.form_create_training_decision_tree_top_level_create_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text="Create File: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_decision_tree_top_level_create_label.grid(row=6, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_create_button = ctk.CTkButton(self.form_create_training_decision_tree_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_training_decision_tree_top_level_create_button_event)
        self.form_create_training_decision_tree_top_level_create_button.grid(row=6, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_decision_tree_top_level_progress_progressbar = ctk.CTkProgressBar(self.form_create_training_decision_tree_top_level_frame, orientation='horizontal', corner_radius=0, height=5)
        self.form_create_training_decision_tree_top_level_progress_progressbar.grid(row=7, column=0, columnspan=2, padx=20, pady=0, sticky="ew")
        self.form_create_training_decision_tree_top_level_progress_progressbar.set(0)

        self.form_create_training_decision_tree_top_level_progress_label = ctk.CTkLabel(self.form_create_training_decision_tree_top_level_frame, text=f"Training with {0} max depth", anchor="center", justify="center", font=self.font_13, height=13, wraplength=460)
        self.form_create_training_decision_tree_top_level_progress_label.grid(row=8, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_button_group.extend([self.form_create_training_decision_tree_top_level_select_button, self.form_create_training_decision_tree_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_training_k_nearest_neighbors(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x432+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_training_k_nearest_neighbors_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_training_k_nearest_neighbors_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_training_k_nearest_neighbors_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_training_k_nearest_neighbors_top_level_frame_1")

        self.form_create_training_k_nearest_neighbors_top_level_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="K-Nearest Neighbors:", anchor="w", font=self.font_17, height=17)
        self.form_create_training_k_nearest_neighbors_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_select_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="Select Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_k_nearest_neighbors_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_select_button = ctk.CTkButton(self.form_create_training_k_nearest_neighbors_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_training_k_nearest_neighbors_top_level_select_button_event)
        self.form_create_training_k_nearest_neighbors_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_selected_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_k_nearest_neighbors_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_selected_entry = ctk.CTkEntry(self.form_create_training_k_nearest_neighbors_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_training_k_nearest_neighbors_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_name_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="File Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_k_nearest_neighbors_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_name_entry = ctk.CTkEntry(self.form_create_training_k_nearest_neighbors_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_k_nearest_neighbors_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_random_state_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="Random State: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_k_nearest_neighbors_top_level_random_state_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_random_state_entry = ctk.CTkEntry(self.form_create_training_k_nearest_neighbors_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_k_nearest_neighbors_top_level_random_state_entry.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_k_nearest_neighbors_top_level_random_state_entry.insert(0, "1234")

        self.form_create_training_k_nearest_neighbors_top_level_n_neighbors_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="N-Neighbors (5, N): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_k_nearest_neighbors_top_level_n_neighbors_label.grid(row=5, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_n_neighbors_entry = ctk.CTkEntry(self.form_create_training_k_nearest_neighbors_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_k_nearest_neighbors_top_level_n_neighbors_entry.grid(row=5, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_k_nearest_neighbors_top_level_n_neighbors_entry.insert(0, "55")

        self.form_create_training_k_nearest_neighbors_top_level_create_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text="Create File: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_k_nearest_neighbors_top_level_create_label.grid(row=6, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_create_button = ctk.CTkButton(self.form_create_training_k_nearest_neighbors_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_training_k_nearest_neighbors_top_level_create_button_event)
        self.form_create_training_k_nearest_neighbors_top_level_create_button.grid(row=6, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_k_nearest_neighbors_top_level_progress_progressbar = ctk.CTkProgressBar(self.form_create_training_k_nearest_neighbors_top_level_frame, orientation='horizontal', corner_radius=0, height=5)
        self.form_create_training_k_nearest_neighbors_top_level_progress_progressbar.grid(row=7, column=0, columnspan=2, padx=20, pady=0, sticky="ew")
        self.form_create_training_k_nearest_neighbors_top_level_progress_progressbar.set(0)

        self.form_create_training_k_nearest_neighbors_top_level_progress_label = ctk.CTkLabel(self.form_create_training_k_nearest_neighbors_top_level_frame, text=f"Training with {0} neighbors", anchor="center", justify="center", font=self.font_13, height=13, wraplength=460)
        self.form_create_training_k_nearest_neighbors_top_level_progress_label.grid(row=8, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_button_group.extend([self.form_create_training_k_nearest_neighbors_top_level_select_button, self.form_create_training_k_nearest_neighbors_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_training_support_vector_machine(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x480+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_training_support_vector_machine_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_training_support_vector_machine_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_training_support_vector_machine_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_training_support_vector_machine_top_level_frame_1")

        self.form_create_training_support_vector_machine_top_level_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="Support Vector Machine:", anchor="w", font=self.font_17, height=17)
        self.form_create_training_support_vector_machine_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_select_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="Select Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_select_button = ctk.CTkButton(self.form_create_training_support_vector_machine_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_training_support_vector_machine_top_level_select_button_event)
        self.form_create_training_support_vector_machine_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_selected_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_selected_entry = ctk.CTkEntry(self.form_create_training_support_vector_machine_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_training_support_vector_machine_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_name_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="File Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_name_entry = ctk.CTkEntry(self.form_create_training_support_vector_machine_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_support_vector_machine_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_kernel_list = ["linear", "poly", "rbf", "sigmoid", "precomputed"]

        self.form_create_training_support_vector_machine_top_level_kernel_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="Kernel: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_kernel_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_kernel_optionmenu = ctk.CTkOptionMenu(self.form_create_training_support_vector_machine_top_level_frame, values=self.form_create_training_support_vector_machine_top_level_kernel_list)
        self.form_create_training_support_vector_machine_top_level_kernel_optionmenu.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_support_vector_machine_top_level_kernel_optionmenu.set(self.form_create_training_support_vector_machine_top_level_kernel_list[0])

        self.form_create_training_support_vector_machine_top_level_random_state_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="Random State: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_random_state_label.grid(row=5, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_random_state_entry = ctk.CTkEntry(self.form_create_training_support_vector_machine_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_support_vector_machine_top_level_random_state_entry.grid(row=5, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_support_vector_machine_top_level_random_state_entry.insert(0, "1234")

        self.form_create_training_support_vector_machine_top_level_c_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="C (1, N): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_c_label.grid(row=6, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_c_entry = ctk.CTkEntry(self.form_create_training_support_vector_machine_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_support_vector_machine_top_level_c_entry.grid(row=6, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_support_vector_machine_top_level_c_entry.insert(0, "100")

        self.form_create_training_support_vector_machine_top_level_create_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text="Create File: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_support_vector_machine_top_level_create_label.grid(row=7, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_create_button = ctk.CTkButton(self.form_create_training_support_vector_machine_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_training_support_vector_machine_top_level_create_button_event)
        self.form_create_training_support_vector_machine_top_level_create_button.grid(row=7, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_support_vector_machine_top_level_progress_progressbar = ctk.CTkProgressBar(self.form_create_training_support_vector_machine_top_level_frame, orientation="horizontal", corner_radius=0, height=5)
        self.form_create_training_support_vector_machine_top_level_progress_progressbar.grid(row=8, column=0, columnspan=2, padx=20, pady=0, sticky="ew")
        self.form_create_training_support_vector_machine_top_level_progress_progressbar.set(0)

        self.form_create_training_support_vector_machine_top_level_progress_label = ctk.CTkLabel(self.form_create_training_support_vector_machine_top_level_frame, text=f"Training with {0} C", anchor="center", justify="center", font=self.font_13, height=13, wraplength=460)
        self.form_create_training_support_vector_machine_top_level_progress_label.grid(row=9, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_button_group.extend([self.form_create_training_support_vector_machine_top_level_select_button, self.form_create_training_support_vector_machine_top_level_create_button])
        self.form_optionmenu_group.append(self.form_create_training_support_vector_machine_top_level_kernel_optionmenu)

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_training_naive_bayes(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x480+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_training_naive_bayes_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_training_naive_bayes_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_training_naive_bayes_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_training_naive_bayes_top_level_frame_1")

        self.form_create_training_naive_bayes_top_level_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Naive Bayes:", anchor="w", font=self.font_17, height=17)
        self.form_create_training_naive_bayes_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_training_naive_bayes_top_level_select_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Select Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_select_button = ctk.CTkButton(self.form_create_training_naive_bayes_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_training_naive_bayes_top_level_select_button_event)
        self.form_create_training_naive_bayes_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_selected_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_selected_entry = ctk.CTkEntry(self.form_create_training_naive_bayes_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_training_naive_bayes_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_name_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="File Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_name_entry = ctk.CTkEntry(self.form_create_training_naive_bayes_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_naive_bayes_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_random_state_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Random State: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_random_state_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_random_state_entry = ctk.CTkEntry(self.form_create_training_naive_bayes_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_naive_bayes_top_level_random_state_entry.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_naive_bayes_top_level_random_state_entry.insert(0, "1234")

        self.form_create_training_naive_bayes_top_level_var_smoothing_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Var Smoothing (1e-9, N): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_var_smoothing_label.grid(row=5, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_var_smoothing_entry = ctk.CTkEntry(self.form_create_training_naive_bayes_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_naive_bayes_top_level_var_smoothing_entry.grid(row=5, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_naive_bayes_top_level_var_smoothing_entry.insert(0, "1e-5")

        self.form_create_training_naive_bayes_top_level_step_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Step: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_step_label.grid(row=6, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_step_entry = ctk.CTkEntry(self.form_create_training_naive_bayes_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_naive_bayes_top_level_step_entry.grid(row=6, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_naive_bayes_top_level_step_entry.insert(0, "1e-7")

        self.form_create_training_naive_bayes_top_level_create_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text="Create File: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_naive_bayes_top_level_create_label.grid(row=7, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_create_button = ctk.CTkButton(self.form_create_training_naive_bayes_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_training_naive_bayes_top_level_create_button_event)
        self.form_create_training_naive_bayes_top_level_create_button.grid(row=7, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_naive_bayes_top_level_progress_progressbar = ctk.CTkProgressBar(self.form_create_training_naive_bayes_top_level_frame, orientation="horizontal", corner_radius=0, height=5)
        self.form_create_training_naive_bayes_top_level_progress_progressbar.grid(row=8, column=0, columnspan=2, padx=20, pady=0, sticky="ew")
        self.form_create_training_naive_bayes_top_level_progress_progressbar.set(0)

        self.form_create_training_naive_bayes_top_level_progress_label = ctk.CTkLabel(self.form_create_training_naive_bayes_top_level_frame, text=f"Training with {0} var smoothing", anchor="center", justify="center", font=self.font_13, height=13, wraplength=460)
        self.form_create_training_naive_bayes_top_level_progress_label.grid(row=9, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_button_group.extend([self.form_create_training_naive_bayes_top_level_select_button, self.form_create_training_naive_bayes_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

    def set_up_form_create_convolutional_neural_network(self):
        if self.form_create_top_level is not None:
            self.on_close_top_level()

        self.form_create_top_level = ctk.CTkToplevel(self)

        self.form_create_top_level.after(250, lambda: self.form_create_top_level.iconbitmap(temp_icon_path))

        self.form_create_top_level.title("InSign")
        self.form_create_top_level.geometry("400x432+500+200")
        self.form_create_top_level.resizable(False, False)
        self.form_create_top_level.wm_transient(self)

        self.form_create_top_level.grid_columnconfigure(0, weight=1)
        self.form_create_top_level.grid_rowconfigure(0, weight=1)

        self.form_create_training_convolutional_neural_network_top_level_frame = ctk.CTkFrame(self.form_create_top_level, corner_radius=10)
        self.form_create_training_convolutional_neural_network_top_level_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
        self.form_create_training_convolutional_neural_network_top_level_frame.grid_columnconfigure((0, 1), weight=1, uniform="form_create_training_convolutional_neural_network_top_level_frame_1")

        self.form_create_training_convolutional_neural_network_top_level_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="Convolutional Neural Network:", anchor="w", font=self.font_17, height=17)
        self.form_create_training_convolutional_neural_network_top_level_label.grid(row=0, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_select_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="Select Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_convolutional_neural_network_top_level_select_label.grid(row=1, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_select_button = ctk.CTkButton(self.form_create_training_convolutional_neural_network_top_level_frame, text="Select", corner_radius=10, font=self.font_13, command=self.form_create_training_convolutional_neural_network_top_level_select_button_event)
        self.form_create_training_convolutional_neural_network_top_level_select_button.grid(row=1, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_selected_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="Folder (Directory): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_convolutional_neural_network_top_level_selected_label.grid(row=2, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_selected_entry = ctk.CTkEntry(self.form_create_training_convolutional_neural_network_top_level_frame, border_width=1, corner_radius=10, state="readonly")
        self.form_create_training_convolutional_neural_network_top_level_selected_entry.grid(row=2, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_name_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="File Name: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_convolutional_neural_network_top_level_name_label.grid(row=3, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_name_entry = ctk.CTkEntry(self.form_create_training_convolutional_neural_network_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_convolutional_neural_network_top_level_name_entry.grid(row=3, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_shuffle_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="Random State: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_convolutional_neural_network_top_level_shuffle_label.grid(row=4, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_shuffle_entry = ctk.CTkEntry(self.form_create_training_convolutional_neural_network_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_convolutional_neural_network_top_level_shuffle_entry.grid(row=4, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_convolutional_neural_network_top_level_shuffle_entry.insert(0, "1234")

        self.form_create_training_convolutional_neural_network_top_level_epoch_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="Epoch (1, N): ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_convolutional_neural_network_top_level_epoch_label.grid(row=5, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_epoch_entry = ctk.CTkEntry(self.form_create_training_convolutional_neural_network_top_level_frame, border_width=1, corner_radius=10)
        self.form_create_training_convolutional_neural_network_top_level_epoch_entry.grid(row=5, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")
        self.form_create_training_convolutional_neural_network_top_level_epoch_entry.insert(0, "20")

        self.form_create_training_convolutional_neural_network_top_level_create_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text="Create File: ", anchor="w", font=self.font_13, height=13)
        self.form_create_training_convolutional_neural_network_top_level_create_label.grid(row=6, column=0, padx=(20, 10), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_create_button = ctk.CTkButton(self.form_create_training_convolutional_neural_network_top_level_frame, text="Create", corner_radius=10, font=self.font_13, command=self.form_create_training_convolutional_neural_network_top_level_create_button_event)
        self.form_create_training_convolutional_neural_network_top_level_create_button.grid(row=6, column=1, padx=(10, 20), pady=(0, 20), sticky="nsew")

        self.form_create_training_convolutional_neural_network_top_level_progress_progressbar = ctk.CTkProgressBar(self.form_create_training_convolutional_neural_network_top_level_frame, orientation='horizontal', corner_radius=0, height=5)
        self.form_create_training_convolutional_neural_network_top_level_progress_progressbar.grid(row=7, column=0, columnspan=2, padx=20, pady=0, sticky="ew")
        self.form_create_training_convolutional_neural_network_top_level_progress_progressbar.set(0)

        self.form_create_training_convolutional_neural_network_top_level_progress_label = ctk.CTkLabel(self.form_create_training_convolutional_neural_network_top_level_frame, text=f"Epoch: {0}", anchor="center", justify="center", font=self.font_13, height=13, wraplength=460)
        self.form_create_training_convolutional_neural_network_top_level_progress_label.grid(row=8, column=0, columnspan=2, padx=20, pady=20, sticky="nsew")

        self.form_button_group.extend([self.form_create_training_convolutional_neural_network_top_level_select_button, self.form_create_training_convolutional_neural_network_top_level_create_button])

        self.setting_application_color_theme_optionmenu_event(self.setting_application_color_theme_optionmenu.get())

        self.form_create_top_level.protocol("WM_DELETE_WINDOW", self.on_close_top_level)

# ==============================================================================================================================================
# camera
    
    def camera_event(self):
        self.update()
        width = 0
        height = 0
        new_width = 0
        new_height = 0
        get_width = 0
        get_height = 0
        if self.on_translate_camera_label:
            width = self.translate_camera_label.winfo_width() * 0.8
            height = self.translate_camera_label.winfo_height() * 0.8
            new_width = (height * 4) / 3
            new_height = (width * 3) / 4
            if new_width <= width:
                get_width = new_width
            else :
                get_width = width
            if new_height <= height:
                get_height = new_height
            else:
                get_height = height
        elif self.on_dataset_add_camera_label:
            width = self.dataset_add_camera_label.winfo_width() * 0.8
            height = self.dataset_add_camera_label.winfo_height() * 0.8
            new_width = (height * 4) / 3
            new_height = (width * 3) / 4
            if new_width <= width:
                get_width = new_width
            else :
                get_width = width
            if new_height <= height:
                get_height = new_height
            else:
                get_height = height
        elif self.on_dataset_redata_camera_label:
            width = self.dataset_redata_camera_label.winfo_width() * 0.8
            height = self.dataset_redata_camera_label.winfo_height() * 0.8
            new_width = (height * 4) / 3
            new_height = (width * 3) / 4
            if new_width <= width:
                get_width = new_width
            else :
                get_width = width
            if new_height <= height:
                get_height = new_height
            else:
                get_height = height
        
        ret, frame = self.cap.read()
        if ret:
            frame_mark = frame
            frame_mark = cv2.cvtColor(frame_mark, cv2.COLOR_BGR2RGB)
            frame_mark.flags.writeable = False
            results = self.holistic.process(frame_mark)        
            frame_mark.flags.writeable = True
            frame_mark = cv2.cvtColor(frame_mark, cv2.COLOR_RGB2BGR)
            if (self.on_dataset_add_camera_label and self.dataset_add_marker_switch.get() == 1) or (self.on_dataset_redata_camera_label and self.dataset_redata_marker_switch.get() == 1) or (self.on_translate_camera_label and self.on_translate_marker):
                if self.setting_landmark_right_hand_switch.get() == 1:
                    self.mp_drawing.draw_landmarks(frame_mark, results.right_hand_landmarks, self.mp_holistic.HAND_CONNECTIONS, 
                        self.mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=4),
                        self.mp_drawing.DrawingSpec(color=(255, 0, 0), thickness=2, circle_radius=2)
                    )
                if self.setting_landmark_left_hand_switch.get() == 1:
                    self.mp_drawing.draw_landmarks(frame_mark, results.left_hand_landmarks, self.mp_holistic.HAND_CONNECTIONS, 
                        self.mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=4),
                        self.mp_drawing.DrawingSpec(color=(255, 0, 0), thickness=2, circle_radius=2)
                    )
                if self.setting_landmark_face_switch.get() == 1:
                    self.mp_drawing.draw_landmarks(frame_mark, results.face_landmarks, self.mp_holistic.FACEMESH_TESSELATION, 
                        self.mp_drawing.DrawingSpec(color=(0, 255, 255), thickness=1, circle_radius=2),
                        self.mp_drawing.DrawingSpec(color=(255, 255, 0), thickness=1, circle_radius=1)
                    )    
                if self.setting_landmark_pose_switch.get() == 1:
                    self.mp_drawing.draw_landmarks(frame_mark, results.pose_landmarks, self.mp_holistic.POSE_CONNECTIONS, 
                        self.mp_drawing.DrawingSpec(color=(255, 0, 255), thickness=2, circle_radius=4),
                        self.mp_drawing.DrawingSpec(color=(0, 125, 255), thickness=2, circle_radius=2)
                    )
                if self.setting_box_right_hand_switch.get() == 1:
                    if results.right_hand_landmarks:            
                        right_hand_point = results.right_hand_landmarks.landmark
                        x_coordinates = [landmark.x for landmark in right_hand_point]
                        y_coordinates = [landmark.y for landmark in right_hand_point]
                        x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                        y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                        x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                        y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30
                        width_side = x_max - x_min
                        height_side = y_max - y_min
                        if width_side < height_side:
                            difference = height_side - width_side
                            addition = int(difference / 2)
                            x_min -= addition
                            x_max += addition
                        elif width_side > height_side:
                            difference = width_side - height_side
                            addition = int(difference / 2)
                            y_min -= addition
                            y_max += addition
                        cv2.rectangle(frame_mark, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2)
                if self.setting_box_left_hand_switch.get() == 1:
                    if results.left_hand_landmarks:            
                        left_hand_point = results.left_hand_landmarks.landmark
                        x_coordinates = [landmark.x for landmark in left_hand_point]
                        y_coordinates = [landmark.y for landmark in left_hand_point]
                        x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                        y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                        x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                        y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30
                        width_side = x_max - x_min
                        height_side = y_max - y_min
                        if width_side < height_side:
                            difference = height_side - width_side
                            addition = int(difference / 2)
                            x_min -= addition
                            x_max += addition
                        elif width_side > height_side:
                            difference = width_side - height_side
                            addition = int(difference / 2)
                            y_min -= addition
                            y_max += addition
                        cv2.rectangle(frame_mark, (x_min, y_min), (x_max, y_max), (0, 255, 0), 2) 
                if self.setting_box_face_switch.get() == 1:
                    if results.face_landmarks:
                        face_point = results.face_landmarks.landmark
                        x_coordinates = [landmark.x for landmark in face_point]
                        y_coordinates = [landmark.y for landmark in face_point]
                        x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                        y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                        x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                        y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30                
                        cv2.rectangle(frame_mark, (x_min, y_min), (x_max, y_max), (170, 100, 255), 2)
                if self.setting_box_pose_switch.get() == 1:
                    if results.pose_landmarks:
                        face_point = results.pose_landmarks.landmark
                        x_coordinates = [landmark.x for landmark in face_point]
                        y_coordinates = [landmark.y for landmark in face_point]
                        x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                        y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                        x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                        y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30
                        cv2.rectangle(frame_mark, (x_min, y_min), (x_max, y_max), (255, 170, 100), 2)                    
            
            if self.on_dataset_add_camera_label and self.on_add_data:
                dataset_type = self.dataset_control_type_optionmenu.get()
                if dataset_type == "Landmark File":
                    if results.right_hand_landmarks or results.left_hand_landmarks:
                        right_x_initial = [0] * 21
                        right_y_initial = [0] * 21
                        left_x_initial = [0] * 21
                        left_y_initial = [0] * 21
                        right_x_min = 0
                        right_y_min = 0
                        left_x_min = 0
                        left_y_min = 0
                        if results.right_hand_landmarks:
                            right_hand_point = results.right_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in right_hand_point]
                            y_coordinates = [landmark.y for landmark in right_hand_point]
                            right_x_min = min(x_coordinates)
                            right_y_min = min(y_coordinates)
                            x_coordinates = np.array(x_coordinates) * frame.shape[1]
                            y_coordinates = np.array(y_coordinates) * frame.shape[0]
                            right_x_initial = list(x_coordinates - right_x_min)
                            right_y_initial = list(y_coordinates - right_y_min)
                        if results.left_hand_landmarks:
                            left_hand_point = results.left_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in left_hand_point]
                            y_coordinates = [landmark.y for landmark in left_hand_point]
                            left_x_min = min(x_coordinates)
                            left_y_min = min(y_coordinates)
                            x_coordinates = np.array(x_coordinates) * frame.shape[1]
                            y_coordinates = np.array(y_coordinates) * frame.shape[0]
                            left_x_initial = list(x_coordinates - left_x_min)
                            left_y_initial = list(x_coordinates - left_y_min)  

                        word = self.dataset_add_word_entry.get().title()
                        landmark_row = [word] + right_x_initial + right_y_initial + left_x_initial + left_y_initial                
                        self.landmark_data.append(landmark_row)
                        self.count_data += 1
                        percentage = self.count_data / self.total_data
                        self.dataset_add_result_progressbar.set(percentage)
                        self.dataset_add_result_label.configure(text=f"Progress: {percentage*100:.2f}%   |   Data Amount: {self.count_data} Data")
                        if self.count_data >= self.total_data:
                            path = self.dataset_selected_path_name_entry.get()
                            csv_file = open(path, "a", newline="")
                            csv_writer = csv.writer(csv_file)
                            for row in self.landmark_data:
                                csv_writer.writerow(row)
                            csv_file.close()
                            self.dataset_add_word_entry.configure(state="normal")
                            self.dataset_add_word_entry.delete(0, ctk.END)
                            self.dataset_add_word_entry.configure(state="readonly")                            
                            self.dataset_edit_add_word_entry.delete(0, ctk.END)
                            self.dataset_add_stop_button_event()
                            self.select_frame_by_name("dataset")
                            self.dataset_selected_path_name_entry_event(path)
                elif dataset_type == "Image Folder":
                    if results.right_hand_landmarks or results.left_hand_landmarks:
                        right_x_initial = [0] * 21
                        right_y_initial = [0] * 21
                        left_x_initial = [0] * 21
                        left_y_initial = [0] * 21
                        right_x_min = 0
                        right_y_min = 0
                        left_x_min = 0
                        left_y_min = 0
                        right_cropped_frame = []
                        left_cropped_frame = []
                        cropped_frame = []
                        if results.right_hand_landmarks:
                            right_hand_point = results.right_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in right_hand_point]
                            y_coordinates = [landmark.y for landmark in right_hand_point]
                            x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                            y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                            x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                            y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30
                            width_side = x_max - x_min
                            height_side = y_max - y_min
                            if width_side < height_side:
                                difference = height_side - width_side
                                addition = int(difference / 2)
                                x_min -= addition
                                x_max += addition
                            elif width_side > height_side:
                                difference = width_side - height_side
                                addition = int(difference / 2)
                                y_min -= addition
                                y_max += addition
                            right_cropped_frame = frame[y_min:y_max, x_min:x_max]                    
                            if isinstance(right_cropped_frame, np.ndarray) and right_cropped_frame.size:
                                right_cropped_frame = cv2.resize(right_cropped_frame, (225, 225))
                                _, right_buffer = cv2.imencode(".jpg", right_cropped_frame)
                                right_encoded_image = np.array(right_buffer)
                                right_cropped_frame = cv2.imdecode(right_encoded_image, cv2.IMREAD_COLOR)
                        if results.left_hand_landmarks:
                            left_hand_point = results.left_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in left_hand_point]
                            y_coordinates = [landmark.y for landmark in left_hand_point]
                            x_min = int(min(x_coordinates) * frame.shape[1]) - 30
                            y_min = int(min(y_coordinates) * frame.shape[0]) - 30
                            x_max = int(max(x_coordinates) * frame.shape[1]) + 30
                            y_max = int(max(y_coordinates) * frame.shape[0]) + 30
                            width_side = x_max - x_min
                            height_side = y_max - y_min
                            if width_side < height_side:
                                difference = height_side - width_side
                                addition = int(difference / 2)
                                x_min -= addition
                                x_max += addition
                            elif width_side > height_side:
                                difference = width_side - height_side
                                addition = int(difference / 2)
                                y_min -= addition
                                y_max += addition
                            left_cropped_frame = frame[y_min:y_max, x_min:x_max]
                            if isinstance(left_cropped_frame, np.ndarray) and left_cropped_frame.size:
                                left_cropped_frame = cv2.resize(left_cropped_frame, (225, 225))                
                                _, left_buffer = cv2.imencode(".jpg", left_cropped_frame)
                                left_encoded_image = np.array(left_buffer)
                                left_cropped_frame = cv2.imdecode(left_encoded_image, cv2.IMREAD_COLOR)
                        
                        if isinstance(left_cropped_frame, np.ndarray) and isinstance(right_cropped_frame, np.ndarray):
                            if left_cropped_frame.size and right_cropped_frame.size and left_cropped_frame.ndim == right_cropped_frame.ndim and left_cropped_frame.shape[0] == right_cropped_frame.shape[0] and left_cropped_frame.dtype == right_cropped_frame.dtype:
                                cropped_frame = cv2.hconcat([left_cropped_frame, right_cropped_frame])
                                if cropped_frame.size:
                                    cropped_frame = cv2.resize(cropped_frame, (225, 225))
                        elif isinstance(left_cropped_frame, np.ndarray):
                            if left_cropped_frame.size:
                                cropped_frame = left_cropped_frame
                        elif isinstance(right_cropped_frame, np.ndarray):
                            if right_cropped_frame.size:
                                cropped_frame = right_cropped_frame
                        if isinstance(cropped_frame, np.ndarray):
                            if cropped_frame.size:
                                self.image_data.append(cropped_frame)
                                self.count_data += 1
                                percentage = self.count_data / self.total_data                            
                                self.dataset_add_result_progressbar.set(percentage)
                                self.dataset_add_result_label.configure(text=f"Progress: {percentage*100:.2f}%   |   Data Amount: {self.count_data} Data")
                                if self.count_data >= self.total_data:
                                    path = self.dataset_selected_path_name_entry.get()
                                    word = self.dataset_add_word_entry.get().title()
                                    os.makedirs(f"{path}/{word}")
                                    for index, write_image in enumerate(self.image_data):
                                        cv2.imwrite(f"{path}/{word}/{word}_{index+1}.jpg", write_image)
                                    self.dataset_add_word_entry.configure(state="normal")
                                    self.dataset_add_word_entry.delete(0, ctk.END)
                                    self.dataset_add_word_entry.configure(state="readonly")                            
                                    self.dataset_edit_add_word_entry.delete(0, ctk.END)
                                    self.dataset_add_stop_button_event()
                                    self.select_frame_by_name("dataset")
                                    self.dataset_selected_path_name_entry_event(path)

            elif self.on_dataset_redata_camera_label and self.on_redata_data:
                dataset_type = self.dataset_control_type_optionmenu.get()
                if dataset_type == "Landmark File":
                    if results.right_hand_landmarks or results.left_hand_landmarks:
                        right_x_initial = [0] * 21
                        right_y_initial = [0] * 21
                        left_x_initial = [0] * 21
                        left_y_initial = [0] * 21
                        right_x_min = 0
                        right_y_min = 0
                        left_x_min = 0
                        left_y_min = 0
                        if results.right_hand_landmarks:
                            right_hand_point = results.right_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in right_hand_point]
                            y_coordinates = [landmark.y for landmark in right_hand_point]
                            right_x_min = min(x_coordinates)
                            right_y_min = min(y_coordinates)
                            x_coordinates = np.array(x_coordinates) * frame.shape[1]
                            y_coordinates = np.array(y_coordinates) * frame.shape[0]
                            right_x_initial = list(x_coordinates - right_x_min)
                            right_y_initial = list(y_coordinates - right_y_min)
                        if results.left_hand_landmarks:
                            left_hand_point = results.left_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in left_hand_point]
                            y_coordinates = [landmark.y for landmark in left_hand_point]
                            left_x_min = min(x_coordinates)
                            left_y_min = min(y_coordinates)
                            x_coordinates = np.array(x_coordinates) * frame.shape[1]
                            y_coordinates = np.array(y_coordinates) * frame.shape[0]
                            left_x_initial = list(x_coordinates - left_x_min)
                            left_y_initial = list(x_coordinates - left_y_min)  

                        word = self.dataset_redata_word_entry.get().title()
                        landmark_row = [word] + right_x_initial + right_y_initial + left_x_initial + left_y_initial                
                        self.landmark_data.append(landmark_row)
                        self.count_data += 1
                        percentage = self.count_data / self.total_data
                        self.dataset_redata_result_progressbar.set(percentage)
                        self.dataset_redata_result_label.configure(text=f"Progress: {percentage*100:.2f}%   |   Data Amount: {self.count_data} Data")
                        if self.count_data >= self.total_data:
                            path = self.dataset_selected_path_name_entry.get()                        
                            dataframe = pd.read_csv(path)
                            dataframe = dataframe[dataframe["class"] != word]
                            dataframe.to_csv(path, index=False)
                            csv_file = open(path, "a", newline="")
                            csv_writer = csv.writer(csv_file)
                            for row in self.landmark_data:
                                csv_writer.writerow(row)
                            csv_file.close()
                            self.dataset_redata_word_entry.configure(state="normal")
                            self.dataset_redata_word_entry.delete(0, ctk.END)
                            self.dataset_redata_word_entry.configure(state="readonly")                            
                            self.dataset_redata_stop_button_event()
                            self.select_frame_by_name("dataset")
                            self.dataset_selected_path_name_entry_event(path)
                elif dataset_type == "Image Folder":
                    if results.right_hand_landmarks or results.left_hand_landmarks:
                        right_x_initial = [0] * 21
                        right_y_initial = [0] * 21
                        left_x_initial = [0] * 21
                        left_y_initial = [0] * 21
                        right_x_min = 0
                        right_y_min = 0
                        left_x_min = 0
                        left_y_min = 0
                        right_cropped_frame = []
                        left_cropped_frame = []
                        cropped_frame = []
                        if results.right_hand_landmarks:
                            right_hand_point = results.right_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in right_hand_point]
                            y_coordinates = [landmark.y for landmark in right_hand_point]
                            x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                            y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                            x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                            y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30
                            width_side = x_max - x_min
                            height_side = y_max - y_min
                            if width_side < height_side:
                                difference = height_side - width_side
                                addition = int(difference / 2)
                                x_min -= addition
                                x_max += addition
                            elif width_side > height_side:
                                difference = width_side - height_side
                                addition = int(difference / 2)
                                y_min -= addition
                                y_max += addition
                            right_cropped_frame = frame[y_min:y_max, x_min:x_max]                    
                            if isinstance(right_cropped_frame, np.ndarray) and right_cropped_frame.size:
                                right_cropped_frame = cv2.resize(right_cropped_frame, (225, 225))
                                _, right_buffer = cv2.imencode(".jpg", right_cropped_frame)
                                right_encoded_image = np.array(right_buffer)
                                right_cropped_frame = cv2.imdecode(right_encoded_image, cv2.IMREAD_COLOR)
                        if results.left_hand_landmarks:
                            left_hand_point = results.left_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in left_hand_point]
                            y_coordinates = [landmark.y for landmark in left_hand_point]
                            x_min = int(min(x_coordinates) * frame.shape[1]) - 30
                            y_min = int(min(y_coordinates) * frame.shape[0]) - 30
                            x_max = int(max(x_coordinates) * frame.shape[1]) + 30
                            y_max = int(max(y_coordinates) * frame.shape[0]) + 30
                            width_side = x_max - x_min
                            height_side = y_max - y_min
                            if width_side < height_side:
                                difference = height_side - width_side
                                addition = int(difference / 2)
                                x_min -= addition
                                x_max += addition
                            elif width_side > height_side:
                                difference = width_side - height_side
                                addition = int(difference / 2)
                                y_min -= addition
                                y_max += addition
                            left_cropped_frame = frame[y_min:y_max, x_min:x_max]
                            if isinstance(left_cropped_frame, np.ndarray) and left_cropped_frame.size:
                                left_cropped_frame = cv2.resize(left_cropped_frame, (225, 225))                
                                _, left_buffer = cv2.imencode(".jpg", left_cropped_frame)
                                left_encoded_image = np.array(left_buffer)
                                left_cropped_frame = cv2.imdecode(left_encoded_image, cv2.IMREAD_COLOR)
                        
                        if isinstance(left_cropped_frame, np.ndarray) and isinstance(right_cropped_frame, np.ndarray):
                            if left_cropped_frame.size and right_cropped_frame.size and left_cropped_frame.ndim == right_cropped_frame.ndim and left_cropped_frame.shape[0] == right_cropped_frame.shape[0] and left_cropped_frame.dtype == right_cropped_frame.dtype:
                                cropped_frame = cv2.hconcat([left_cropped_frame, right_cropped_frame])
                                if cropped_frame.size:
                                    cropped_frame = cv2.resize(cropped_frame, (225, 225))
                        elif isinstance(left_cropped_frame, np.ndarray):
                            if left_cropped_frame.size:
                                cropped_frame = left_cropped_frame
                        elif isinstance(right_cropped_frame, np.ndarray):
                            if right_cropped_frame.size:
                                cropped_frame = right_cropped_frame
                        if isinstance(cropped_frame, np.ndarray):
                            if cropped_frame.size:
                                self.image_data.append(cropped_frame)
                                self.count_data += 1
                                percentage = self.count_data / self.total_data                            
                                self.dataset_redata_result_progressbar.set(percentage)
                                self.dataset_redata_result_label.configure(text=f"Progress: {percentage*100:.2f}%   |   Data Amount: {self.count_data} Data")
                                if self.count_data >= self.total_data:
                                    path = self.dataset_selected_path_name_entry.get()
                                    word = self.dataset_redata_word_entry.get().title()
                                    shutil.rmtree(f'{path}/{word}')
                                    os.makedirs(f"{path}/{word}")
                                    for index, write_image in enumerate(self.image_data):
                                        cv2.imwrite(f"{path}/{word}/{word}_{index+1}.jpg", write_image)
                                    self.dataset_redata_word_entry.configure(state="normal")
                                    self.dataset_redata_word_entry.delete(0, ctk.END)
                                    self.dataset_redata_word_entry.configure(state="readonly")                            
                                    self.dataset_redata_stop_button_event()
                                    self.select_frame_by_name("dataset")
                                    self.dataset_selected_path_name_entry_event(path)
                   
            elif self.on_translate_camera_label and self.on_tranlsate_with_training_model is not None:
                if self.on_tranlsate_with_training_model['algorithm'] == 'Convolutional Neural Network':
                    cv2.rectangle(frame_mark, (0, 0), (300, 80), (255, 255, 255), -1)
                    cv2.putText(frame_mark, 'Class:', (100, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                    cv2.putText(frame_mark, 'Prob:', (20, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                    if results.right_hand_landmarks or results.left_hand_landmarks:
                        right_x_initial = [0] * 21
                        right_y_initial = [0] * 21
                        left_x_initial = [0] * 21
                        left_y_initial = [0] * 21
                        right_x_min = 0
                        right_y_min = 0
                        left_x_min = 0
                        left_y_min = 0
                        right_cropped_frame = []
                        left_cropped_frame = []
                        cropped_frame = []
                        if results.right_hand_landmarks:
                            right_hand_point = results.right_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in right_hand_point]
                            y_coordinates = [landmark.y for landmark in right_hand_point]
                            x_min = int(min(x_coordinates) * frame_mark.shape[1]) - 30
                            y_min = int(min(y_coordinates) * frame_mark.shape[0]) - 30
                            x_max = int(max(x_coordinates) * frame_mark.shape[1]) + 30
                            y_max = int(max(y_coordinates) * frame_mark.shape[0]) + 30
                            width_side = x_max - x_min
                            height_side = y_max - y_min
                            if width_side < height_side:
                                difference = height_side - width_side
                                addition = int(difference / 2)
                                x_min -= addition
                                x_max += addition
                            elif width_side > height_side:
                                difference = width_side - height_side
                                addition = int(difference / 2)
                                y_min -= addition
                                y_max += addition
                            right_cropped_frame = frame[y_min:y_max, x_min:x_max]                    
                            if isinstance(right_cropped_frame, np.ndarray) and right_cropped_frame.size:
                                right_cropped_frame = cv2.resize(right_cropped_frame, (225, 225))
                                _, right_buffer = cv2.imencode('.jpg', right_cropped_frame)
                                right_encoded_image = np.array(right_buffer)
                                right_cropped_frame = cv2.imdecode(right_encoded_image, cv2.IMREAD_COLOR)
                        if results.left_hand_landmarks:
                            left_hand_point = results.left_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in left_hand_point]
                            y_coordinates = [landmark.y for landmark in left_hand_point]
                            x_min = int(min(x_coordinates) * frame.shape[1]) - 30
                            y_min = int(min(y_coordinates) * frame.shape[0]) - 30
                            x_max = int(max(x_coordinates) * frame.shape[1]) + 30
                            y_max = int(max(y_coordinates) * frame.shape[0]) + 30
                            width_side = x_max - x_min
                            height_side = y_max - y_min
                            if width_side < height_side:
                                difference = height_side - width_side
                                addition = int(difference / 2)
                                x_min -= addition
                                x_max += addition
                            elif width_side > height_side:
                                difference = width_side - height_side
                                addition = int(difference / 2)
                                y_min -= addition
                                y_max += addition
                            left_cropped_frame = frame[y_min:y_max, x_min:x_max]
                            if isinstance(left_cropped_frame, np.ndarray) and left_cropped_frame.size:
                                left_cropped_frame = cv2.resize(left_cropped_frame, (225, 225))                
                                _, left_buffer = cv2.imencode('.jpg', left_cropped_frame)
                                left_encoded_image = np.array(left_buffer)
                                left_cropped_frame = cv2.imdecode(left_encoded_image, cv2.IMREAD_COLOR)
                        if isinstance(left_cropped_frame, np.ndarray) and isinstance(right_cropped_frame, np.ndarray):
                            if left_cropped_frame.size and right_cropped_frame.size and left_cropped_frame.ndim == right_cropped_frame.ndim and left_cropped_frame.shape[0] == right_cropped_frame.shape[0] and left_cropped_frame.dtype == right_cropped_frame.dtype:
                                cropped_frame = cv2.hconcat([left_cropped_frame, right_cropped_frame])
                                if cropped_frame.size:
                                    cropped_frame = cv2.resize(cropped_frame, (225, 225))
                        elif isinstance(left_cropped_frame, np.ndarray):
                            cropped_frame = left_cropped_frame
                        elif isinstance(right_cropped_frame, np.ndarray):
                            cropped_frame = right_cropped_frame
                        if isinstance(cropped_frame, np.ndarray):
                            if cropped_frame.size:
                                cropped_frame = cv2.cvtColor(cropped_frame, cv2.COLOR_BGR2GRAY)
                                cropped_frame = cv2.resize(cropped_frame, (48, 48))                            
                                image_array = image.img_to_array(cropped_frame)
                                image_array = np.expand_dims(cropped_frame, axis=0)
                                image_array = image_array / 255.0
                                predictions_class_index = self.on_tranlsate_with_training_model['trained_model'].predict(image_array)
                                predictions_probability = tf.nn.softmax(predictions_class_index[0])
                                word = self.on_tranlsate_with_training_model['class_names'][np.argmax(predictions_class_index)]
                                percentage = round((100 * np.max(predictions_probability)), 2)
                                cv2.putText(frame_mark, word, (100, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                                cv2.putText(frame_mark, f'{percentage}%', (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                                self.check_translate.append(word)
                                if len(self.check_translate) == 15:
                                    count_words = Counter(self.check_translate)
                                    modus_words = [word for word, max_words in count_words.items() if max_words == max(count_words.values())]
                                    text_output = self.translate_control_result_entry.get()
                                    get_word = text_output.split(' ')
                                    get_word = list(filter(None, text_output.split(' ')))
                                    if len(get_word) == 1:
                                        if modus_words[0] != get_word[-1]:
                                            text_output = modus_words[0] + ' '
                                            self.translate_control_result_entry.configure(state="normal")
                                            self.translate_control_result_entry.insert(ctk.END, text_output)
                                            self.translate_control_result_entry.configure(state="readonly")
                                            self.count_time = 0
                                            self.translate_control_time_limit_progressbar.set(self.count_time)                                                                     
                                    elif len(get_word) > 1:
                                        if modus_words[0] != get_word[-1] and modus_words[0] != get_word[-2] + ' ' + get_word[-1]:
                                            text_output = modus_words[0] + ' '                           
                                            self.translate_control_result_entry.configure(state="normal")
                                            self.translate_control_result_entry.insert(ctk.END, text_output) 
                                            self.translate_control_result_entry.configure(state="readonly")
                                            self.count_time = 0
                                            self.translate_control_time_limit_progressbar.set(self.count_time)          
                                    else:
                                        text_output = modus_words[0] + ' '
                                        self.translate_control_result_entry.configure(state="normal")
                                        self.translate_control_result_entry.insert(ctk.END, text_output)
                                        self.translate_control_result_entry.configure(state="readonly")
                                    self.check_translate = []  
                            else:
                                cv2.putText(frame_mark, 'Unknown', (100, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                                cv2.putText(frame_mark, '-', (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)                                    
                        else:
                            cv2.putText(frame_mark, 'Unknown', (100, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                            cv2.putText(frame_mark, '-', (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA) 
                    else:
                        cv2.putText(frame_mark, 'Unknown', (100, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                        cv2.putText(frame_mark, '-', (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA) 
                    if self.translate_control_result_entry.get() != '':
                        self.count_time += 0.005
                        self.translate_control_time_limit_progressbar.set(self.count_time)                                  
                        if self.count_time >= 1:
                            get_text = self.translate_control_result_entry.get()
                            self.translate_control_result_entry.configure(state="normal")                            
                            self.translate_control_result_entry.delete(0, ctk.END)
                            self.translate_control_result_entry.configure(state="readonly")                            
                            get_history_data = {
                                'date': datetime.now().strftime('%Y-%m-%d'),
                                'time': datetime.now().strftime('%H:%M:%S'),
                                'translate': get_text
                            }
                            if len(self.translate_history_data) == 0:
                                self.translate_translation_textbox.configure(state="normal")                                
                                self.translate_translation_textbox.delete('1.0', ctk.END)
                                self.translate_translation_textbox.configure(state="disabled")
                            self.translate_history_data.append(get_history_data)
                            self.translate_translation_textbox.configure(state="normal")        
                            self.translate_translation_textbox.insert(ctk.END, f"{get_history_data['date']} | {get_history_data['time']}\n\n")
                            self.translate_translation_textbox.insert(ctk.END, f"{get_history_data['translate']}\n\n\n")
                            self.translate_translation_textbox.configure(state="disabled")                                                        
                            self.count_time = 0
                            self.translate_control_time_limit_progressbar.set(self.count_time)      
                            self.check_translate = []  
                    else:
                        self.count_time = 0

                else:
                    cv2.rectangle(frame_mark, (0, 0), (300, 80), (255, 255, 255), -1)
                    cv2.putText(frame_mark, 'Class:', (100, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                    cv2.putText(frame_mark, 'Prob:', (20, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                    if results.right_hand_landmarks or results.left_hand_landmarks:
                        right_x_initial = [0] * 21
                        right_y_initial = [0] * 21
                        left_x_initial = [0] * 21
                        left_y_initial = [0] * 21
                        right_x_min = 0
                        right_y_min = 0
                        left_x_min = 0
                        left_y_min = 0
                        if results.right_hand_landmarks:
                            right_hand_point = results.right_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in right_hand_point]
                            y_coordinates = [landmark.y for landmark in right_hand_point]
                            right_x_min = min(x_coordinates)
                            right_y_min = min(y_coordinates)
                            x_coordinates = np.array(x_coordinates) * frame.shape[1]
                            y_coordinates = np.array(y_coordinates) * frame.shape[0]
                            right_x_initial = list(x_coordinates - right_x_min)
                            right_y_initial = list(y_coordinates - right_y_min)
                        if results.left_hand_landmarks:
                            left_hand_point = results.left_hand_landmarks.landmark
                            x_coordinates = [landmark.x for landmark in left_hand_point]
                            y_coordinates = [landmark.y for landmark in left_hand_point]
                            left_x_min = min(x_coordinates)
                            left_y_min = min(y_coordinates)
                            x_coordinates = np.array(x_coordinates) * frame.shape[1]
                            y_coordinates = np.array(y_coordinates) * frame.shape[0]
                            left_x_initial = list(x_coordinates - left_x_min)
                            left_y_initial = list(x_coordinates - left_y_min)  
                        landmark_row = right_x_initial + right_y_initial + left_x_initial + left_y_initial              
                        X_predict = pd.DataFrame([landmark_row])
                        predictions_class = self.on_tranlsate_with_training_model['trained_model'].predict(X_predict)[0]
                        predictions_probability = self.on_tranlsate_with_training_model['trained_model'].predict_proba(X_predict)[0]
                        word = predictions_class
                        percentage = round((predictions_probability[np.argmax(predictions_probability)] * 100), 2)
                        cv2.putText(frame_mark, word, (100, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                        cv2.putText(frame_mark, f'{percentage}%', (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)                        
                        self.check_translate.append(word)
                        if len(self.check_translate) == 15:
                            count_words = Counter(self.check_translate)
                            modus_words = [word for word, max_words in count_words.items() if max_words == max(count_words.values())]
                            text_output = self.translate_control_result_entry.get()
                            get_word = text_output.split(' ')
                            get_word = list(filter(None, text_output.split(' ')))
                            if len(get_word) == 1:
                                if modus_words[0] != get_word[-1]:
                                    text_output = modus_words[0] + ' '
                                    self.translate_control_result_entry.configure(state="normal")
                                    self.translate_control_result_entry.insert(ctk.END, text_output)
                                    self.translate_control_result_entry.configure(state="readonly")
                                    self.count_time = 0
                                    self.translate_control_time_limit_progressbar.set(self.count_time)                                                                     
                            elif len(get_word) > 1:
                                if modus_words[0] != get_word[-1] and modus_words[0] != get_word[-2] + ' ' + get_word[-1]:
                                    text_output = modus_words[0] + ' '                           
                                    self.translate_control_result_entry.configure(state="normal")
                                    self.translate_control_result_entry.insert(ctk.END, text_output) 
                                    self.translate_control_result_entry.configure(state="readonly")
                                    self.count_time = 0
                                    self.translate_control_time_limit_progressbar.set(self.count_time)          
                            else:
                                text_output = modus_words[0] + ' '
                                self.translate_control_result_entry.configure(state="normal")
                                self.translate_control_result_entry.insert(ctk.END, text_output)
                                self.translate_control_result_entry.configure(state="readonly")
                            self.check_translate = []  
                    else:
                        cv2.putText(frame_mark, 'Unknown', (100, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
                        cv2.putText(frame_mark, '-', (20, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)                                    
                    if self.translate_control_result_entry.get() != '':
                        self.count_time += 0.005
                        self.translate_control_time_limit_progressbar.set(self.count_time)                                  
                        if self.count_time >= 1:
                            get_text = self.translate_control_result_entry.get()
                            self.translate_control_result_entry.configure(state="normal")                            
                            self.translate_control_result_entry.delete(0, ctk.END)
                            self.translate_control_result_entry.configure(state="readonly")                            
                            get_history_data = {
                                'date': datetime.now().strftime('%Y-%m-%d'),
                                'time': datetime.now().strftime('%H:%M:%S'),
                                'translate': get_text
                            }
                            if len(self.translate_history_data) == 0:
                                self.translate_translation_textbox.configure(state="normal")                                
                                self.translate_translation_textbox.delete('1.0', ctk.END)
                                self.translate_translation_textbox.configure(state="disabled")
                            self.translate_history_data.append(get_history_data)
                            self.translate_translation_textbox.configure(state="normal")        
                            self.translate_translation_textbox.insert(ctk.END, f"{get_history_data['date']} | {get_history_data['time']}\n\n")
                            self.translate_translation_textbox.insert(ctk.END, f"{get_history_data['translate']}\n\n\n")
                            self.translate_translation_textbox.configure(state="disabled")                                                        
                            self.count_time = 0
                            self.translate_control_time_limit_progressbar.set(self.count_time)      
                            self.check_translate = []  
                    else:
                        self.count_time = 0

            imagectk = ctk.CTkImage(light_image=Image.fromarray(cv2.cvtColor(frame_mark, cv2.COLOR_BGR2RGB)), dark_image=Image.fromarray(cv2.cvtColor(frame_mark, cv2.COLOR_BGR2RGB)), size=(get_width, get_height))
            if self.on_translate_camera_label:
                self.translate_camera_label.configure(image=imagectk)                    
                self.translate_camera_label.image = imagectk
            elif self.on_dataset_add_camera_label:
                self.dataset_add_camera_label.configure(image=imagectk)
                self.dataset_add_camera_label.image = imagectk
            elif self.on_dataset_redata_camera_label:
                self.dataset_redata_camera_label.configure(image=imagectk)
                self.dataset_redata_camera_label.image = imagectk
        self.after(10, self.camera_event)

# ==============================================================================================================================================
# translate

    def translate_control_marker_button_event(self):
        if self.on_translate_marker:
            self.translate_control_marker_button.configure(fg_color="transparent")
            self.on_translate_marker = False
        else:
            self.translate_control_marker_button.configure(fg_color=("gray70", "gray30"))
            self.on_translate_marker = True

    def translate_control_restart_button_event(self):
        self.check_translate = []

        self.count_time = 0

        self.translate_control_time_limit_progressbar.set(self.count_time)      

        self.translate_control_result_entry.configure(state="normal")                            
        self.translate_control_result_entry.delete(0, ctk.END)
        self.translate_control_result_entry.configure(state="readonly")          
        
    def translate_control_start_button_event(self):
        training_path = self.training_selected_path_name_entry.get()
        history_path = self.history_selected_path_name_entry.get()
        if training_path:
            if history_path:
                trained_model = None
                with open(training_path, 'rb') as file:
                    trained_model = pickle.load(file)
                self.on_tranlsate_with_training_model = trained_model
                self.with_history_path = history_path
            else:
                results = messagebox.askyesno('Confirmation', 'You haven\'t selected a history file, do you want to continue translating without a history file?')
                if results:
                    trained_model = None
                    with open(training_path, 'rb') as file:
                        trained_model = pickle.load(file)
                    self.on_tranlsate_with_training_model = trained_model
                    self.with_history_path = None
        else:
            messagebox.showinfo('Warning', 'Sorry, can\'t translate without training file!')

    def translate_control_stop_button_event(self):
        if self.on_tranlsate_with_training_model is not None:
            if self.with_history_path is not None:
                if len(self.translate_history_data) > 0:            
                    workbook = load_workbook(self.with_history_path)                
                    sheet_name = self.translate_history_data[0]['date'] + ' ' + self.translate_history_data[0]['time'].replace(':', '_')
                    sheet = workbook.create_sheet(title=sheet_name)            
                    header = ['Translation', 'Date', 'Time']
                    sheet.append(header)
                    bold_font = Font(bold=True)
                    thin_border = Border(
                        left=Side(style='thin'),
                        right=Side(style='thin'),
                        top=Side(style='thin'),
                        bottom=Side(style='thin')
                    )
                    for cell in sheet[1]:
                        cell.font = bold_font
                        cell.border = thin_border
                    for item in self.translate_history_data:
                        row = [item['translate'], item['date'], item['time']]
                        sheet.append(row)
                    workbook.save(self.with_history_path)
                    self.history_selected_path_name_entry_event(self.with_history_path)

        self.translate_history_data = []
        self.check_translate = []

        self.count_time = 0
        
        self.on_tranlsate_with_training_model = None
        self.with_history_path = None

        self.translate_control_time_limit_progressbar.set(self.count_time)      

        self.translate_control_result_entry.configure(state="normal")                            
        self.translate_control_result_entry.delete(0, ctk.END)
        self.translate_control_result_entry.configure(state="readonly")          

        self.translate_translation_textbox.configure(state="normal")                                
        self.translate_translation_textbox.delete('1.0', ctk.END)
        self.translate_translation_textbox.insert(ctk.END, "No Data")
        self.translate_translation_textbox.configure(state="disabled")

    def translate_control_erase_button_event(self):
        self.check_translate = []

        self.count_time = 0
                
        self.translate_control_time_limit_progressbar.set(self.count_time)      

        text_output = self.translate_control_result_entry.get()
        get_word = text_output.split(' ')
        new_text = ''
        get_word = get_word[:-2]
        for word in get_word:
            new_text += (word + ' ')
        self.translate_control_result_entry.configure(state="normal")                            
        self.translate_control_result_entry.delete(0, ctk.END)
        self.translate_control_result_entry.insert(0, new_text)
        self.translate_control_result_entry.configure(state="readonly")          
        
# ==============================================================================================================================================
# dataset
    
    def dataset_control_type_optionmenu_event(self, choice):
        if choice == "Landmark File":
            self.training_control_algorithm_optionmenu.configure(values=self.training_control_algorithm_landmark_list)
            self.training_control_algorithm_optionmenu.set(self.training_control_algorithm_landmark_list[0])
        elif choice == "Image Folder":
            self.training_control_algorithm_optionmenu.configure(values=self.training_control_algorithm_image_list)
            self.training_control_algorithm_optionmenu.set(self.training_control_algorithm_image_list[0])
        self.dataset_selected_path_clear_button_event()
    
    def dataset_control_select_button_event(self):
        dataset_type = self.dataset_control_type_optionmenu.get()
        dataset_path = ""
        if dataset_type == "Landmark File":
            dataset_path = filedialog.askopenfilename()
        elif dataset_type == "Image Folder":
            dataset_path = filedialog.askdirectory()
        if dataset_path:
            self.dataset_selected_path_name_entry_event(dataset_path)

    def dataset_control_create_button_event(self):
        self.set_up_form_create_dataset()
    
    def dataset_control_delete_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        if dataset_path:
            result = messagebox.askyesno("Confirmation", f"Are you sure you want to delete this {dataset_path} dataset?")
            if result:
                if os.path.isfile(dataset_path):
                    os.remove(dataset_path)
                elif os.path.isdir(dataset_path):
                    shutil.rmtree(dataset_path)
                self.dataset_selected_path_clear_button_event()
        else:
            messagebox.showinfo("Warning", "Please select the dataset first!")

    def dataset_selected_path_name_entry_event(self, dataset_path):
        self.dataset_selected_path_clear_button_event()
        dataset_type = self.dataset_control_type_optionmenu.get()
        if dataset_path:
            if dataset_type == "Landmark File":
                if os.path.splitext(dataset_path)[1].lower() == ".csv":
                    header = ["class"]
                    x_right = []
                    y_right = []
                    x_left = []
                    y_left = []
                    for i in range(21):
                        x_right.append(f"rx{i}")
                        y_right.append(f"ry{i}")
                        x_left.append(f"lx{i}")
                        y_left.append(f"ly{i}")
                    header.extend(x_right + y_right + x_left + y_left)
                    csv_file = open(dataset_path, "r", newline="")
                    csv_reader = csv.reader(csv_file)
                    first_row = next(csv_reader, 0)
                    if first_row == header:
                        labels = []
                        exit_loop = False
                        for row in csv_reader:
                            if exit_loop:
                                break
                            if len(row) != len(header):
                                messagebox.showinfo("Warning", f"Sorry, in the {dataset_path} file there are a number of columns that do not match our dataset reader system!")
                                break
                            for column in row[1:]:
                                try:
                                    float(column)
                                except ValueError:
                                    messagebox.showinfo("Warning", f"Sorry, in the {dataset_path} file was found landmark data that does not comply with the requirements of our dataset reader system!")
                                    exit_loop = True
                                    break
                            labels.append(row[0])
                        check_labels = True                    
                        if len(labels) > 0:
                            counts = Counter(labels)
                            if not all(value == self.total_data for value in counts.values()):
                                messagebox.showinfo("Warning", "Sorry, the number of landmarks in the dataset does not match!")
                                check_labels = False
                        if check_labels:
                            key = {}.fromkeys(labels)
                            unique = list(key.keys())
                            self.dataset_selected_path_name_entry.configure(state="normal")
                            self.dataset_selected_path_name_entry.delete(0, ctk.END)
                            self.dataset_selected_path_name_entry.insert(0, dataset_path)
                            self.dataset_selected_path_name_entry.configure(state="readonly")
                            self.dataset_word_list_scrollableframe_event(unique)
                    else:
                        messagebox.showinfo("Warning", f"Sorry, the header in the {dataset_path} file does not match our dataset reader system!")
                    csv_file.close()
                else:
                    messagebox.showinfo("Warning", "Sorry, the dataset file is not compatible with our reader system!")            
            elif dataset_type == "Image Folder":
                dataset_labels = os.listdir(dataset_path)
                labels = []
                check_labels = True
                exit_loop = False
                for label_folder in dataset_labels:
                    label = label_folder
                    label_folder = dataset_path + "/" + label_folder
                    if exit_loop:
                        check_labels = False
                        break
                    if os.path.isdir(label_folder):
                        image_files = os.listdir(label_folder)
                        if len(image_files) != self.total_data:
                            messagebox.showinfo("Warning", "Sorry, the number of images in the dataset does not match!")
                            check_labels = False
                            break
                        else:
                            labels.append(label)
                            for image_file in image_files:
                                if not (image_file.endswith(".jpg") or image_file.endswith(".png") or image_file.endswith(".jpeg")):
                                    messagebox.showinfo("Warning", f"Sorry, found foreign files in dataset {dataset_path}!")
                                    exit_loop = True
                                    check_labels = False
                                    break
                    elif os.path.isfile(label_folder):
                        messagebox.showinfo("Warning", f"Sorry, found foreign files in dataset {dataset_path}!")
                        check_labels = False
                        break
                if check_labels:
                    self.dataset_selected_path_name_entry.configure(state="normal")
                    self.dataset_selected_path_name_entry.delete(0, ctk.END)
                    self.dataset_selected_path_name_entry.insert(0, dataset_path)
                    self.dataset_selected_path_name_entry.configure(state="readonly")
                    self.dataset_word_list_scrollableframe_event(labels)

    def dataset_selected_path_clear_button_event(self):
        self.dataset_selected_path_name_entry.configure(state="normal")
        self.dataset_selected_path_name_entry.delete(0, ctk.END)
        self.dataset_selected_path_name_entry.configure(state="readonly")
        self.dataset_word_list_scrollableframe_event([])
        self.dataset_selected_word_clear_button_event()

    def dataset_word_list_scrollableframe_event(self, words):
        for widget in self.dataset_word_list_scrollableframe.winfo_children():
            widget.destroy()
        if len(words) > 0:
            for word in words:
                self.dataset_word_list_button = ctk.CTkButton(self.dataset_word_list_scrollableframe, corner_radius=10, border_spacing=10, height=40, text=word, fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=lambda text=word: self.dataset_selected_word_name_entry_event(text))
                self.dataset_word_list_button.pack(padx=(9, 0), pady=0, fill="both")
        else:
            self.dataset_word_list_no_data_label = ctk.CTkLabel(self.dataset_word_list_scrollableframe, text="No Data", anchor="w", font=self.font_13, height=13)
            self.dataset_word_list_no_data_label.pack(padx=(9, 0), pady=0, fill="both")

    def dataset_selected_word_name_entry_event(self, word):
        self.dataset_selected_word_name_entry.configure(state="normal")
        self.dataset_selected_word_name_entry.delete(0, ctk.END)
        self.dataset_selected_word_name_entry.insert(0, word)
        self.dataset_selected_word_name_entry.configure(state="readonly") 

    def dataset_selected_word_clear_button_event(self):
        self.dataset_selected_word_name_entry.configure(state="normal")
        self.dataset_selected_word_name_entry.delete(0, ctk.END)
        self.dataset_selected_word_name_entry.configure(state="readonly") 

    # create dataset
    
    def form_create_dataset_top_level_select_button_event(self):
        dataset_directory = filedialog.askdirectory()
        if dataset_directory:
            self.form_create_dataset_top_level_selected_entry.configure(state="normal")
            self.form_create_dataset_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_dataset_top_level_selected_entry.insert(0, dataset_directory)
            self.form_create_dataset_top_level_selected_entry.configure(state="readonly")

    def form_create_dataset_top_level_create_button_event(self):
        dataset_directory = self.form_create_dataset_top_level_selected_entry.get()
        dataset_name = self.form_create_dataset_top_level_name_entry.get()
        if dataset_directory:
            if dataset_name:
                dataset_type = self.dataset_control_type_optionmenu.get()
                if dataset_type == "Landmark File":
                    header = ["class"]                
                    x_right = []
                    y_right = []
                    x_left = []
                    y_left = []
                    for i in range(21):
                        x_right.append(f"rx{i}")
                        y_right.append(f"ry{i}")
                        x_left.append(f"lx{i}")
                        y_left.append(f"ly{i}")
                    header.extend(x_right + y_right + x_left + y_left)
                    dataset_name = dataset_name.split(".")[0] + ".csv"
                    dataset_path = dataset_directory + "/" + dataset_name
                    csv_file = open(dataset_path, "w", newline="")
                    csv_writer = csv.writer(csv_file)
                    csv_writer.writerow(header)
                    csv_file.close()
                    self.dataset_selected_path_name_entry_event(dataset_path)
                    self.on_close_top_level()
                elif dataset_type == "Image Folder":
                    dataset_name = dataset_name.split(".")[0]
                    dataset_path = dataset_directory + "/" + dataset_name
                    os.makedirs(dataset_path)
                    self.dataset_selected_path_name_entry_event(dataset_path)
                    self.on_close_top_level()
            else:
                messagebox.showinfo("Warning", "Please complete the dataset name section of the form!")
        else:
            messagebox.showinfo("Warning", "Please complete the dataset directory section of the form!")            

    # add dataset
    
    def dataset_edit_add_next_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        if dataset_path:
            word = self.dataset_edit_add_word_entry.get()
            word = word.title()
            if word:
                words = []
                for widget in self.dataset_word_list_scrollableframe.winfo_children():
                    if isinstance(widget, ctk.CTkButton):
                        words.append(widget.cget("text").title())   
                if word not in words:
                    self.dataset_add_word_entry.configure(state="normal")
                    self.dataset_add_word_entry.delete(0, ctk.END)
                    self.dataset_add_word_entry.insert(0, word)
                    self.dataset_add_word_entry.configure(state="readonly")
                    self.select_frame_by_name("add")
                else:
                    messagebox.showinfo("Warning", "Sorry, the new word already exists in the dataset!") 
            else:
                messagebox.showinfo("Warning", "Please fill in the new word you want to add!") 
        else:
            messagebox.showinfo("Warning", "Please select the dataset first!")

    def dataset_add_start_button_event(self):
        self.on_add_data = True
        self.count_data = 0
        self.landmark_data = []
        self.image_data = []
        self.dataset_add_result_progressbar.set(0)
        self.dataset_add_result_label.configure(text="Progress: 0%   |   Data Amount: 0 Data")

    def dataset_add_stop_button_event(self):
        self.on_add_data = False
        self.count_data = 0
        self.landmark_data = []
        self.image_data = []
        self.dataset_add_result_progressbar.set(0)
        self.dataset_add_result_label.configure(text="Progress: 0%   |   Data Amount: 0 Data")

    # delete dataset

    def dataset_edit_delete_word_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        if dataset_path:
            word = self.dataset_selected_word_name_entry.get()
            word = word.title()
            if word:
                result = messagebox.askyesno("Confirmation", f"Are you sure you want to remove the word {word} from the dataset {dataset_path}?")
                if result:
                    dataset_type = self.dataset_control_type_optionmenu.get()
                    if dataset_type == 'Landmark File':
                        dataframe = pd.read_csv(dataset_path)
                        dataframe = dataframe[dataframe['class'] != word]
                        dataframe.to_csv(dataset_path, index=False)
                    elif dataset_type == 'Image Folder':
                        shutil.rmtree(f'{dataset_path}/{word}')
                    self.dataset_selected_path_name_entry_event(dataset_path)
            else:
                messagebox.showinfo("Warning", "Please select the word you want to delete!") 
        else:
            messagebox.showinfo("Warning", "Please select the dataset first!")

    # redata dataset

    def dataset_edit_redata_change_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        if dataset_path:
            word = self.dataset_selected_word_name_entry.get()
            word = word.title()
            if word:
                self.dataset_redata_word_entry.configure(state="normal")
                self.dataset_redata_word_entry.delete(0, ctk.END)
                self.dataset_redata_word_entry.insert(0, word)
                self.dataset_redata_word_entry.configure(state="readonly")
                self.select_frame_by_name("redata")
            else:
                messagebox.showinfo("Warning", "Please select the word you want to redata!") 
        else:
            messagebox.showinfo("Warning", "Please select the dataset first!")

    def dataset_redata_start_button_event(self):
        self.on_redata_data = True
        self.count_data = 0
        self.landmark_data = []
        self.image_data = []
        self.dataset_redata_result_progressbar.set(0)
        self.dataset_redata_result_label.configure(text="Progress: 0%   |   Data Amount: 0 Data")

    def dataset_redata_stop_button_event(self):
        self.on_redata_data = False
        self.count_data = 0
        self.landmark_data = []
        self.image_data = []   
        self.dataset_redata_result_progressbar.set(0)
        self.dataset_redata_result_label.configure(text="Progress: 0%   |   Data Amount: 0 Data")

    # relabel dataset
        
    def dataset_edit_relabel_change_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        if dataset_path:
            old_word = self.dataset_selected_word_name_entry.get().title()
            if old_word:
                new_word = self.dataset_edit_relabel_word_entry.get().title()
                if new_word:
                    words = []
                    for widget in self.dataset_word_list_scrollableframe.winfo_children():
                        if isinstance(widget, ctk.CTkButton):
                            words.append(widget.cget("text").title())   
                    if new_word not in words:
                        dataset_type = self.dataset_control_type_optionmenu.get()
                        if dataset_type == 'Landmark File':                            
                            df = pd.read_csv(dataset_path)
                            df['class'] = df['class'].replace(old_word, new_word)
                            df.to_csv(dataset_path, index=False)
                        elif dataset_type == 'Image Folder':
                            os.rename(f'{dataset_path}/{old_word}', f'{dataset_path}/{new_word}')
                            folder = os.listdir(f'{dataset_path}/{new_word}')
                            for index, image in enumerate(folder):
                                os.rename(f'{dataset_path}/{new_word}/{image}', f'{dataset_path}/{new_word}/{new_word}_{index+1}.jpg')
                        self.dataset_edit_relabel_word_entry.delete(0, ctk.END)
                        self.dataset_selected_path_name_entry_event(dataset_path)
                    else:
                        messagebox.showinfo('Warning', 'Sorry, the new word already exists in the dataset!') 
                else:
                    messagebox.showinfo('Warning', 'Please fill in the new word!') 
            else:
                messagebox.showinfo('Warning', 'Please select the word you want to relabel!')             
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')        

# ==============================================================================================================================================
# training
            
    def training_control_select_button_event(self):
        training_path = filedialog.askopenfilename()
        self.training_graph_event(training_path)

    def training_control_train_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        if dataset_path:
            training_algorithm = self.training_control_algorithm_optionmenu.get()
            if training_algorithm == "Random Forest":
                self.set_up_form_create_training_random_forest()
            elif training_algorithm == "Decision Tree":
                self.set_up_form_create_training_decision_tree()
            elif training_algorithm == "K-Nearest Neighbors":
                self.set_up_form_create_training_k_nearest_neighbors()
            elif training_algorithm == "Support Vector Machine":
                self.set_up_form_create_training_support_vector_machine()
            elif training_algorithm == "Naive Bayes":
                self.set_up_form_create_training_naive_bayes()
            elif training_algorithm == "Convolutional Neural Network":
                self.set_up_form_create_convolutional_neural_network()
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')

    def training_control_delete_path_button_event(self):
        training_path = self.training_selected_path_name_entry.get()
        if training_path:
            result = messagebox.askyesno("Confirmation", f"Are you sure you want to delete this {training_path} training?")
            if result:
                os.remove(training_path)
                self.training_selected_path_clear_button_event()
        else:
            messagebox.showinfo("Warning", "Please select the training first!")
            
    def training_selected_path_clear_button_event(self):
        self.training_selected_path_name_entry.configure(state="normal")
        self.training_selected_path_name_entry.delete(0, ctk.END)
        self.training_selected_path_name_entry.configure(state="readonly")
        self.training_selected_path_type_entry.configure(state="normal")
        self.training_selected_path_type_entry.delete(0, ctk.END)
        self.training_selected_path_type_entry.configure(state="readonly")

        self.training_graph_classification_report_scrollableframe.destroy()
        self.training_graph_confusion_matrix_scrollableframe.destroy()
        self.training_graph_error_rate_scrollableframe.destroy()
        self.training_graph_epoch_loss_scrollableframe.destroy()
        self.training_graph_epoch_accuracy_scrollableframe.destroy()
        
        # ====================================
        # classification report

        self.training_graph_classification_report_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Classification Report"))
        self.training_graph_classification_report_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_classification_report_scrollableframe.grid_columnconfigure((0, 1, 2, 3, 4), weight=1, uniform="training_graph_classification_report_scrollableframe_1")

        self.training_graph_classification_report_label = ctk.CTkLabel(self.training_graph_classification_report_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_classification_report_label.grid(row=0, column=0, columnspan=5, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # confusion matrix

        self.training_graph_confusion_matrix_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Confusion Matrix"))
        self.training_graph_confusion_matrix_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_confusion_matrix_scrollableframe.grid_columnconfigure(0, weight=1)

        self.training_graph_confusion_matrix_label = ctk.CTkLabel(self.training_graph_confusion_matrix_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_confusion_matrix_label.grid(row=0, column=0, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # error rate

        self.training_graph_error_rate_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Error Rate"))
        self.training_graph_error_rate_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_error_rate_scrollableframe.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_graph_error_rate_scrollableframe_1")

        self.training_graph_error_rate_label = ctk.CTkLabel(self.training_graph_error_rate_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_error_rate_label.grid(row=0, column=0, columnspan=3, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # epoch loss

        self.training_graph_epoch_loss_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Epoch Loss"))
        self.training_graph_epoch_loss_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_epoch_loss_scrollableframe.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_graph_epoch_loss_scrollableframe_1")

        self.training_graph_epoch_loss_label = ctk.CTkLabel(self.training_graph_epoch_loss_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_epoch_loss_label.grid(row=0, column=0, columnspan=5, padx=0, pady=(0, 20), sticky="nsew")

        # ====================================
        # epoch Accuracy

        self.training_graph_epoch_accuracy_scrollableframe = ctk.CTkScrollableFrame(self.training_graph_results_tabview.tab("Epoch Accuracy"))
        self.training_graph_epoch_accuracy_scrollableframe.grid(row=0, column=0, padx=(9, 0), pady=0, sticky="nsew")
        self.training_graph_epoch_accuracy_scrollableframe.grid_columnconfigure((0, 1, 2), weight=1, uniform="training_graph_epoch_accuracy_scrollableframe_1")

        self.training_graph_epoch_accuracy_label = ctk.CTkLabel(self.training_graph_epoch_accuracy_scrollableframe, text="No Data", anchor="center", font=self.font_13, height=450)
        self.training_graph_epoch_accuracy_label.grid(row=0, column=0, columnspan=5, padx=0, pady=(0, 20), sticky="nsew")

        self.header_group = []

# form training

    def form_create_training_random_forest_top_level_select_button_event(self):
        training_path = filedialog.askdirectory()
        if training_path:
            self.form_create_training_random_forest_top_level_selected_entry.configure(state="normal")
            self.form_create_training_random_forest_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_training_random_forest_top_level_selected_entry.insert(0, training_path)
            self.form_create_training_random_forest_top_level_selected_entry.configure(state="readonly")

    def form_create_training_random_forest_top_level_create_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        training_path = self.form_create_training_random_forest_top_level_selected_entry.get()
        training_name = self.form_create_training_random_forest_top_level_name_entry.get()
        random_state = int(self.form_create_training_random_forest_top_level_random_state_entry.get())
        n_estimators = int(self.form_create_training_random_forest_top_level_n_estimators_entry.get())
        if dataset_path:
            if training_path:
                if training_name:
                    training_name = training_name.split('.')[0] + '.pkl'
                    if random_state:
                        if random_state > 0:
                            if n_estimators:
                                if n_estimators >= 100:
                                    training_path = training_path + '/' + training_name
                                    get_training_path = self.random_forest(dataset_path, training_path, random_state, n_estimators)
                                    if get_training_path:
                                        self.training_graph_event(get_training_path)
                                    self.on_close_top_level()
                                else:
                                    messagebox.showinfo('Warning', 'Please fill the n-estimators in range (100, N)!')                        
                            else:
                                messagebox.showinfo('Warning', 'Please fill in the n-estimators first!')                        
                        else:
                            messagebox.showinfo('Warning', 'Please fill the random state with a positive integer!')
                    else:
                        messagebox.showinfo('Warning', 'Please fill in the random state first!')
                else:
                    messagebox.showinfo('Warning', 'Please fill in the training name first!')
            else:
                messagebox.showinfo('Warning', 'Please fill in the training path first!')
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')
            
    def form_create_training_decision_tree_top_level_select_button_event(self):
        training_path = filedialog.askdirectory()
        if training_path:
            self.form_create_training_decision_tree_top_level_selected_entry.configure(state="normal")
            self.form_create_training_decision_tree_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_training_decision_tree_top_level_selected_entry.insert(0, training_path)
            self.form_create_training_decision_tree_top_level_selected_entry.configure(state="readonly")        

    def form_create_training_decision_tree_top_level_create_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        training_path = self.form_create_training_decision_tree_top_level_selected_entry.get()
        training_name = self.form_create_training_decision_tree_top_level_name_entry.get()
        random_state = int(self.form_create_training_decision_tree_top_level_random_state_entry.get())
        max_depth = int(self.form_create_training_decision_tree_top_level_max_depth_entry.get())    
        if dataset_path:
            if training_path:
                if training_name:
                    training_name = training_name.split('.')[0] + '.pkl'
                    if random_state:
                        if random_state > 0:
                            if max_depth:
                                if max_depth >= 0:
                                    training_path = training_path + '/' + training_name
                                    get_training_path = self.decision_tree(dataset_path, training_path, random_state, max_depth)
                                    if get_training_path:
                                        self.training_graph_event(get_training_path)                                    
                                    self.on_close_top_level()
                                else:
                                    messagebox.showinfo('Warning', 'Please fill the max depth in range (0, N)!')                        
                            else:
                                messagebox.showinfo('Warning', 'Please fill in the max depth first!')                        
                        else:
                            messagebox.showinfo('Warning', 'Please fill the random state with a positive integer!')
                    else:
                        messagebox.showinfo('Warning', 'Please fill in the random state first!')
                else:
                    messagebox.showinfo('Warning', 'Please fill in the training name first!')
            else:
                messagebox.showinfo('Warning', 'Please fill in the training path first!')
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')
    
    def form_create_training_k_nearest_neighbors_top_level_select_button_event(self):
        training_path = filedialog.askdirectory()
        if training_path:
            self.form_create_training_k_nearest_neighbors_top_level_selected_entry.configure(state="normal")
            self.form_create_training_k_nearest_neighbors_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_training_k_nearest_neighbors_top_level_selected_entry.insert(0, training_path)
            self.form_create_training_k_nearest_neighbors_top_level_selected_entry.configure(state="readonly")

    def form_create_training_k_nearest_neighbors_top_level_create_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        training_path = self.form_create_training_k_nearest_neighbors_top_level_selected_entry.get()
        training_name = self.form_create_training_k_nearest_neighbors_top_level_name_entry.get()
        random_state = int(self.form_create_training_k_nearest_neighbors_top_level_random_state_entry.get())
        n_neighbors = int(self.form_create_training_k_nearest_neighbors_top_level_n_neighbors_entry.get())        
        if dataset_path:
            if training_path:
                if training_name:
                    training_name = training_name.split('.')[0] + '.pkl'
                    if random_state:
                        if random_state > 0:
                            if n_neighbors:
                                if n_neighbors >= 5:
                                    training_path = training_path + '/' + training_name
                                    get_training_path = self.k_nearest_neighbors(dataset_path, training_path, random_state, n_neighbors)
                                    if get_training_path:
                                        self.training_graph_event(get_training_path)                                    
                                    self.on_close_top_level()
                                else:
                                    messagebox.showinfo('Warning', 'Please fill the n-neighbors in range (5, N)!')                        
                            else:
                                messagebox.showinfo('Warning', 'Please fill in the n-neighbors first!')                        
                        else:
                            messagebox.showinfo('Warning', 'Please fill the random state with a positive integer!')
                    else:
                        messagebox.showinfo('Warning', 'Please fill in the random state first!')
                else:
                    messagebox.showinfo('Warning', 'Please fill in the training name first!')
            else:
                messagebox.showinfo('Warning', 'Please fill in the training path first!')
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')

    def form_create_training_support_vector_machine_top_level_select_button_event(self):
        training_path = filedialog.askdirectory()
        if training_path:
            self.form_create_training_support_vector_machine_top_level_selected_entry.configure(state="normal")
            self.form_create_training_support_vector_machine_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_training_support_vector_machine_top_level_selected_entry.insert(0, training_path)
            self.form_create_training_support_vector_machine_top_level_selected_entry.configure(state="readonly")                    

    def form_create_training_support_vector_machine_top_level_create_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        training_path = self.form_create_training_support_vector_machine_top_level_selected_entry.get()
        training_name = self.form_create_training_support_vector_machine_top_level_name_entry.get()
        kernel = self.form_create_training_support_vector_machine_top_level_kernel_optionmenu.get()
        random_state = int(self.form_create_training_support_vector_machine_top_level_random_state_entry.get())
        c = int(self.form_create_training_support_vector_machine_top_level_c_entry.get())
        if dataset_path:
            if training_path:
                if training_name:
                    training_name = training_name.split('.')[0] + '.pkl'
                    if random_state:
                        if random_state > 0:
                            if c:
                                if c >= 1:
                                    if kernel:
                                        training_path = training_path + '/' + training_name
                                        get_training_path = self.support_vector_machine(dataset_path, training_path, random_state, c, kernel)
                                        if get_training_path:
                                            self.training_graph_event(get_training_path)                                        
                                        self.on_close_top_level()
                                    else:
                                        messagebox.showinfo('Warning', 'Please fill in the kernel!')                                
                                else:
                                    messagebox.showinfo('Warning', 'Please fill the c in range (1, N)!')                        
                            else:
                                messagebox.showinfo('Warning', 'Please fill in the c first!')                        
                        else:
                            messagebox.showinfo('Warning', 'Please fill the random state with a positive integer!')
                    else:
                        messagebox.showinfo('Warning', 'Please fill in the random state first!')
                else:
                    messagebox.showinfo('Warning', 'Please fill in the training name first!')
            else:
                messagebox.showinfo('Warning', 'Please fill in the training path first!')
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')

    def form_create_training_naive_bayes_top_level_select_button_event(self):
        training_path = filedialog.askdirectory()
        if training_path:
            self.form_create_training_naive_bayes_top_level_selected_entry.configure(state="normal")
            self.form_create_training_naive_bayes_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_training_naive_bayes_top_level_selected_entry.insert(0, training_path)
            self.form_create_training_naive_bayes_top_level_selected_entry.configure(state="readonly")

    def form_create_training_naive_bayes_top_level_create_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        training_path = self.form_create_training_naive_bayes_top_level_selected_entry.get()
        training_name = self.form_create_training_naive_bayes_top_level_name_entry.get()
        random_state = int(self.form_create_training_naive_bayes_top_level_random_state_entry.get())
        var_smoothing = self.form_create_training_naive_bayes_top_level_var_smoothing_entry.get()
        step = self.form_create_training_naive_bayes_top_level_step_entry.get()
        if dataset_path:
            if training_path:
                if training_name:
                    training_name = training_name.split('.')[0] + '.pkl'
                    if random_state:
                        if random_state > 0:
                            if var_smoothing:
                                if re.match(r'^1e-\d+$', var_smoothing):
                                    if step:
                                        if re.match(r'^1e-\d+$', step):
                                            var_smoothing = float(var_smoothing)
                                            step = float(step)
                                            training_path = training_path + '/' + training_name
                                            get_training_path = self.naive_bayes(dataset_path, training_path, random_state, var_smoothing, step)
                                            if get_training_path:
                                                self.training_graph_event(get_training_path)                                            
                                            self.on_close_top_level()
                                        else:
                                            messagebox.showinfo('Warning', 'Please fill the step with this format (1e-...)!') 
                                    else:
                                        messagebox.showinfo('Warning', 'Please fill in the step first!')                                                                                
                                else:
                                    messagebox.showinfo('Warning', 'Please fill the var smoothing in range (1e-9, N)!')   
                            else:
                                messagebox.showinfo('Warning', 'Please fill in the var smoothing first!')                        
                        else:
                            messagebox.showinfo('Warning', 'Please fill the random state with a positive integer!')
                    else:
                        messagebox.showinfo('Warning', 'Please fill in the random state first!')
                else:
                    messagebox.showinfo('Warning', 'Please fill in the training name first!')
            else:
                messagebox.showinfo('Warning', 'Please fill in the training path first!')
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')

    def form_create_training_convolutional_neural_network_top_level_select_button_event(self):
        training_path = filedialog.askdirectory()
        if training_path:
            self.form_create_training_convolutional_neural_network_top_level_selected_entry.configure(state="normal")
            self.form_create_training_convolutional_neural_network_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_training_convolutional_neural_network_top_level_selected_entry.insert(0, training_path)
            self.form_create_training_convolutional_neural_network_top_level_selected_entry.configure(state="readonly")

    def form_create_training_convolutional_neural_network_top_level_create_button_event(self):
        dataset_path = self.dataset_selected_path_name_entry.get()
        training_path = self.form_create_training_convolutional_neural_network_top_level_selected_entry.get()
        training_name = self.form_create_training_convolutional_neural_network_top_level_name_entry.get()
        shuffle = int(self.form_create_training_convolutional_neural_network_top_level_shuffle_entry.get())
        epochs = int(self.form_create_training_convolutional_neural_network_top_level_epoch_entry.get())          
        if dataset_path:
            if training_path:
                if training_name:
                    training_name = training_name.split('.')[0] + '.pkl'
                    if shuffle:
                        if shuffle >= 300:
                            if epochs:
                                if epochs >= 1:
                                    training_path = training_path + '/' + training_name
                                    self.convolutional_neural_network(dataset_path, training_path, shuffle, epochs)
                                else:
                                    messagebox.showinfo('Warning', 'Please fill the epochs in range (1, N)!')                        
                            else:
                                messagebox.showinfo('Warning', 'Please fill in the epochs first!')                        
                        else:
                            messagebox.showinfo('Warning', 'Please fill the shuffle with more than 300!')
                    else:
                        messagebox.showinfo('Warning', 'Please fill in the shuffle first!')
                else:
                    messagebox.showinfo('Warning', 'Please fill in the training name first!')
            else:
                messagebox.showinfo('Warning', 'Please fill in the training path first!')
        else:
            messagebox.showinfo('Warning', 'Please select the dataset first!')
            
# graph

    def training_graph_event(self, training_path):
        if training_path:
            if os.path.splitext(training_path)[1].lower() == '.pkl':
                trained_model = None
                with open(training_path, 'rb') as file:
                    trained_model = pickle.load(file)
                check_model = True
                try:
                    trained_model['algorithm']
                    trained_model['class_names']
                    trained_model['classification_report']
                    trained_model['confusion_matrix']
                    trained_model['error_rate']
                    trained_model['epoch_loss']
                    trained_model['epoch_accuracy']
                    trained_model['trained_model']

                    trained_model['error_rate']['range']
                    trained_model['error_rate']['train_error']
                    trained_model['error_rate']['test_error']
                    trained_model['epoch_loss']['epoch']
                    trained_model['epoch_loss']['training_loss']
                    trained_model['epoch_loss']['validation_loss']
                    trained_model['epoch_accuracy']['epoch']
                    trained_model['epoch_accuracy']['training_accuracy']
                    trained_model['epoch_accuracy']['validation_accuracy']
                except:
                    check_model = False
                if check_model:
                    
                    self.training_selected_path_clear_button_event()

                    theme_json = json.loads(self.green_json_string)                  
                    if self.setting_application_color_theme_optionmenu.get() == 'Green':
                        theme_json = json.loads(self.green_json_string)             
                    elif self.setting_application_color_theme_optionmenu.get() == 'Blue':
                        theme_json = json.loads(self.blue_json_string)
                    elif self.setting_application_color_theme_optionmenu.get() == 'Dark Blue':
                        theme_json = json.loads(self.dark_blue_json_string)                           
                    header_color = theme_json['CTkButton']['fg_color']

                    self.training_selected_path_name_entry.configure(state="normal")
                    self.training_selected_path_name_entry.delete(0, ctk.END)
                    self.training_selected_path_name_entry.insert(0, training_path)
                    self.training_selected_path_name_entry.configure(state="readonly")
                    self.training_selected_path_type_entry.configure(state="normal")
                    self.training_selected_path_type_entry.insert(0, trained_model['algorithm'])
                    self.training_selected_path_type_entry.configure(state="readonly")
                                
                    temporary_trained_data = trained_model
                    training_algorithm = trained_model['algorithm']
                    if trained_model['classification_report'] is not None:
                        labels = list(trained_model['classification_report'].keys())[:-3]
                        precision = [trained_model['classification_report'][label]['precision'] for label in labels]
                        recall = [trained_model['classification_report'][label]['recall'] for label in labels]
                        f1_score = [trained_model['classification_report'][label]['f1-score'] for label in labels]
                        x = range(len(labels))
                        width = 0.2
                        plt.figure(figsize=(8, 6))
                        plt.bar(x, precision, width=width, label='Precision')
                        plt.bar([i + width for i in x], recall, width=width, label='Recall')
                        plt.bar([i + 2 * width for i in x], f1_score, width=width, label='F1-score')
                        plt.xlabel('Class')
                        plt.ylabel('Scores')
                        plt.title(f'Classification Report {training_algorithm}')
                        plt.xticks([i + width for i in x], labels, rotation=45)
                        plt.legend()
                        plt.tight_layout()
                        self.canvas_classification_report = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_classification_report_label)
                        self.canvas_classification_report.draw()
                        self.canvas_classification_report.get_tk_widget().grid(row=0, column=0, sticky="nsew")
                        # header
                        headers = ["Label", "Precision", "Recall", "F1-Score", "Support"]
                        for index, header in enumerate(headers):
                            header_table = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                            header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                            self.header_group.append(header_table)
                        # row
                        step = 2
                        empty = "     "
                        for index, row in enumerate(trained_model['classification_report']):
                            if row == 'accuracy':
                                column_table_1 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")
                                column_table_4 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_4.grid(row=index+step, column=3, padx=0, pady=0, sticky="nsew")
                                column_table_5 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_5.grid(row=index+step, column=4, padx=0, pady=0, sticky="nsew")
                                step += 1                                                                                                
                                column_table_6 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=row, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_6.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_7 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_7.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_8 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=empty, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_8.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")
                                column_table_9 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=trained_model['classification_report'][row], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_9.grid(row=index+step, column=3, padx=0, pady=0, sticky="nsew")
                                column_table_10 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=trained_model['classification_report']['macro avg']['support'], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_10.grid(row=index+step, column=4, padx=0, pady=0, sticky="nsew")                                                                                                
                            else:
                                column_table_1 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=row, corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=trained_model['classification_report'][row]['precision'], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=trained_model['classification_report'][row]['recall'], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")
                                column_table_4 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=trained_model['classification_report'][row]['f1-score'], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_4.grid(row=index+step, column=3, padx=0, pady=0, sticky="nsew")
                                column_table_5 = ctk.CTkButton(self.training_graph_classification_report_scrollableframe, text=trained_model['classification_report'][row]['support'], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_5.grid(row=index+step, column=4, padx=0, pady=0, sticky="nsew")
                    if trained_model['confusion_matrix'] is not None:
                        confusion_matrix_list = []
                        for row in temporary_trained_data['confusion_matrix']:
                            row_data = []
                            for column in row:
                                row_data.append(int(column))
                            confusion_matrix_list.append(row_data)
                        temporary_trained_data['confusion_matrix'] = confusion_matrix_list
                        plt.figure(figsize=(8, 6))
                        sns.heatmap(trained_model['confusion_matrix'], annot=True, fmt='d', cmap='Blues', cbar=False, xticklabels=trained_model['class_names'], yticklabels=trained_model['class_names'])
                        plt.xlabel('Predicted Labels')
                        plt.ylabel('True Labels')
                        plt.title(f'Confusion Matrix {training_algorithm}')
                        self.canvas_confusion_matrix = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_confusion_matrix_label)
                        self.canvas_confusion_matrix.draw()
                        self.canvas_confusion_matrix.get_tk_widget().grid(row=0, column=0, sticky="nsew")
                        column_length = len(trained_model['confusion_matrix'][0])                        
                        for column in range(column_length):
                            self.training_graph_confusion_matrix_scrollableframe.grid_columnconfigure(column, weight=1, uniform="training_graph_confusion_matrix_scrollableframe_1")
                        for row_index, row in enumerate(trained_model['confusion_matrix']):
                            for column_index, column in enumerate(row):
                                if row_index == column_index:
                                    column_table_1 = ctk.CTkButton(self.training_graph_confusion_matrix_scrollableframe, text=trained_model['confusion_matrix'][row_index][column_index], corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                                    column_table_1.grid(row=row_index+1, column=column_index, padx=0, pady=0, sticky="nsew")   
                                    self.header_group.append(column_table_1)
                                else:
                                    column_table_1 = ctk.CTkButton(self.training_graph_confusion_matrix_scrollableframe, text=trained_model['confusion_matrix'][row_index][column_index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                    column_table_1.grid(row=row_index+1, column=column_index, padx=0, pady=0, sticky="nsew")                   
                        self.training_graph_confusion_matrix_label.grid_forget()
                        self.training_graph_confusion_matrix_label.grid(row=0, column=0, columnspan=column_length, padx=0, pady=(0, 20), sticky="nsew")
                    if trained_model['error_rate']['range'] is not None:
                        temporary_trained_data['error_rate']['range'] = list(temporary_trained_data['error_rate']['range'])
                        if trained_model['algorithm'] == 'Random Forest':
                            plt.figure(figsize=(8, 6))
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['train_error'], label='Train Error', marker='o', linestyle='-', color='red')
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['test_error'], label='Test Error', marker='o', linestyle='-', color='blue')
                            plt.xlabel('N-Estimators (Range)')
                            plt.ylabel('Error Rate')
                            plt.title(f'Error Rate Vs N-Estimators {training_algorithm}')
                            plt.legend()
                            self.canvas_error_rate = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_error_rate_label)
                            self.canvas_error_rate.draw()
                            self.canvas_error_rate.get_tk_widget().grid(row=0, column=0, sticky="nsew")
                            # header
                            headers = ["Range", "Training Error", "Testing Error"]
                            for index, header in enumerate(headers):
                                header_table = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                                header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                                self.header_group.append(header_table)
                            # row
                            step = 2
                            empty = "     "
                            for index, row in enumerate(trained_model['error_rate']['range']):
                                column_table_1 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['range'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['train_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['test_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")
                        elif trained_model['algorithm'] == 'K-Nearest Neighbors':
                            plt.figure(figsize=(8, 6))
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['train_error'], label='Train Error', marker='o', linestyle='-', color='red')
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['test_error'], label='Test Error', marker='o', linestyle='-', color='blue')
                            plt.xlabel('N-Neighbors (Range)')
                            plt.ylabel('Error Rate')
                            plt.title(f'Error Rate Vs N-Neighbors {training_algorithm}')
                            plt.legend()
                            self.canvas_error_rate = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_error_rate_label)
                            self.canvas_error_rate.draw()
                            self.canvas_error_rate.get_tk_widget().grid(row=0, column=0, sticky="nsew") 
                            # header
                            headers = ["Range", "Training Error", "Testing Error"]
                            for index, header in enumerate(headers):
                                header_table = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                                header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                                self.header_group.append(header_table)
                            # row
                            step = 2
                            empty = "     "
                            for index, row in enumerate(trained_model['error_rate']['range']):
                                column_table_1 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['range'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['train_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['test_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")
                        elif trained_model['algorithm'] == 'Decision Tree':
                            plt.figure(figsize=(8, 6))
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['train_error'], label='Train Error', marker='o', linestyle='-', color='red')
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['test_error'], label='Test Error', marker='o', linestyle='-', color='blue')
                            plt.xlabel('Max Depth (Range)')
                            plt.ylabel('Error Rate')
                            plt.title(f'Error Rate Vs Max Depth {training_algorithm}')
                            plt.legend()
                            self.canvas_error_rate = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_error_rate_label)
                            self.canvas_error_rate.draw()
                            self.canvas_error_rate.get_tk_widget().grid(row=0, column=0, sticky="nsew")     
                            # header
                            headers = ["Range", "Training Error", "Testing Error"]
                            for index, header in enumerate(headers):
                                header_table = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                                header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                                self.header_group.append(header_table)
                            # row
                            step = 2
                            empty = "     "
                            for index, row in enumerate(trained_model['error_rate']['range']):
                                column_table_1 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['range'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['train_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['test_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")                          
                        elif trained_model['algorithm'] == 'Support Vector Machine':
                            plt.figure(figsize=(8, 6))
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['train_error'], label='Train Error', marker='o', linestyle='-', color='red')
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['test_error'], label='Test Error', marker='o', linestyle='-', color='blue')
                            plt.xlabel('C (Range)')
                            plt.ylabel('Error Rate')
                            plt.title(f'Error Rate Vs C {training_algorithm}')
                            plt.legend()
                            self.canvas_error_rate = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_error_rate_label)
                            self.canvas_error_rate.draw()
                            self.canvas_error_rate.get_tk_widget().grid(row=0, column=0, sticky="nsew")
                            # header
                            headers = ["Range", "Training Error", "Testing Error"]
                            for index, header in enumerate(headers):
                                header_table = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                                header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                                self.header_group.append(header_table)
                            # row
                            step = 2
                            empty = "     "
                            for index, row in enumerate(trained_model['error_rate']['range']):
                                column_table_1 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['range'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['train_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['test_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")
                        elif trained_model['algorithm'] == 'Naive Bayes':
                            plt.figure(figsize=(8, 6))
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['train_error'], label='Train Error', marker='o', linestyle='-', color='red')
                            plt.plot(trained_model['error_rate']['range'], trained_model['error_rate']['test_error'], label='Test Error', marker='o', linestyle='-', color='blue')
                            plt.xlabel('Var Smoothing (Range)')
                            plt.ylabel('Error Rate')
                            plt.title(f'Error Rate Vs Var Smoothing {training_algorithm}')
                            plt.legend()
                            self.canvas_error_rate = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_error_rate_label)
                            self.canvas_error_rate.draw()
                            self.canvas_error_rate.get_tk_widget().grid(row=0, column=0, sticky="nsew")     
                            # header
                            headers = ["Range", "Training Error", "Testing Error"]
                            for index, header in enumerate(headers):
                                header_table = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                                header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                                self.header_group.append(header_table)
                            # row
                            step = 2
                            empty = "     "
                            for index, row in enumerate(trained_model['error_rate']['range']):
                                column_table_1 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['range'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                                column_table_2 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['train_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                                column_table_3 = ctk.CTkButton(self.training_graph_error_rate_scrollableframe, text=trained_model['error_rate']['test_error'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                                column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")                                     
                    if trained_model['epoch_loss']['epoch'] is not None:
                        temporary_trained_data['epoch_loss']['epoch'] = list(temporary_trained_data['epoch_loss']['epoch'])
                        plt.figure(figsize=(8, 6))
                        plt.plot(trained_model['epoch_loss']['epoch'], trained_model['epoch_loss']['training_loss'], label='Training Loss', marker='o', linestyle='-', color='red')
                        plt.plot(trained_model['epoch_loss']['epoch'], trained_model['epoch_loss']['validation_loss'], label='Validation Loss', marker='o', linestyle='-', color='blue')
                        plt.xlabel('Epochs')
                        plt.ylabel('Loss')
                        plt.title(f'Epochs Vs Loss {training_algorithm}')
                        plt.legend()
                        self.canvas_epoch_loss = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_epoch_loss_label)
                        self.canvas_epoch_loss.draw()
                        self.canvas_epoch_loss.get_tk_widget().grid(row=0, column=0, sticky="nsew")
                        # header
                        headers = ["Epoch", "Training Loss", "Validation Loss"]
                        for index, header in enumerate(headers):
                            header_table = ctk.CTkButton(self.training_graph_epoch_loss_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                            header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                            self.header_group.append(header_table)
                        # row
                        step = 2
                        empty = "     "
                        for index, row in enumerate(trained_model['epoch_loss']['epoch']):
                            column_table_1 = ctk.CTkButton(self.training_graph_epoch_loss_scrollableframe, text=trained_model['epoch_loss']['epoch'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                            column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                            column_table_2 = ctk.CTkButton(self.training_graph_epoch_loss_scrollableframe, text=trained_model['epoch_loss']['training_loss'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                            column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                            column_table_3 = ctk.CTkButton(self.training_graph_epoch_loss_scrollableframe, text=trained_model['epoch_loss']['validation_loss'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                            column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")                        
                    if trained_model['epoch_accuracy']['epoch'] is not None:                    
                        temporary_trained_data['epoch_accuracy']['epoch'] = list(temporary_trained_data['epoch_accuracy']['epoch'])
                        plt.figure(figsize=(8, 6))
                        plt.plot(trained_model['epoch_accuracy']['epoch'], trained_model['epoch_accuracy']['training_accuracy'], label='Training Accuracy', marker='o', linestyle='-', color='red')
                        plt.plot(trained_model['epoch_accuracy']['epoch'], trained_model['epoch_accuracy']['validation_accuracy'], label='Validation Accuracy', marker='o', linestyle='-', color='blue')
                        plt.xlabel('Epochs')
                        plt.ylabel('Accuracy')
                        plt.title(f'Epochs Vs Accuracy {training_algorithm}')
                        plt.legend()
                        self.canvas_epoch_accuracy = FigureCanvasTkAgg(plt.gcf(), master=self.training_graph_epoch_accuracy_label)
                        self.canvas_epoch_accuracy.draw()
                        self.canvas_epoch_accuracy.get_tk_widget().grid(row=0, column=0, sticky="nsew")
                        # header
                        headers = ["Epoch", "Training Accuracy", "Validation Accuracy"]
                        for index, header in enumerate(headers):
                            header_table = ctk.CTkButton(self.training_graph_epoch_accuracy_scrollableframe, text=header, corner_radius=0, border_width=1, fg_color=header_color, hover_color=header_color)
                            header_table.grid(row=1, column=index, padx=0, pady=0, sticky="nsew")
                            self.header_group.append(header_table)
                        # row
                        step = 2
                        empty = "     "
                        for index, row in enumerate(trained_model['epoch_accuracy']['epoch']):
                            column_table_1 = ctk.CTkButton(self.training_graph_epoch_accuracy_scrollableframe, text=trained_model['epoch_accuracy']['epoch'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                            column_table_1.grid(row=index+step, column=0, padx=0, pady=0, sticky="nsew")
                            column_table_2 = ctk.CTkButton(self.training_graph_epoch_accuracy_scrollableframe, text=trained_model['epoch_accuracy']['training_accuracy'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                            column_table_2.grid(row=index+step, column=1, padx=0, pady=0, sticky="nsew")
                            column_table_3 = ctk.CTkButton(self.training_graph_epoch_accuracy_scrollableframe, text=trained_model['epoch_accuracy']['validation_accuracy'][index], corner_radius=0, border_width=1, fg_color="transparent", hover_color=("gray86", "gray17"), text_color=("gray10", "#DCE4EE"))
                            column_table_3.grid(row=index+step, column=2, padx=0, pady=0, sticky="nsew")                            
                else:
                    messagebox.showinfo('Warning', 'Sorry, the training file != compatible with our reader system!')            
            else:
                messagebox.showinfo('Warning', 'Sorry, the training file != compatible with our reader system!')

# algorithm
    
    def random_forest(self, dataset_path, training_path, random_state, n_estimators):
        df = pd.read_csv(dataset_path)
        X = df.drop('class', axis=1)
        y = df['class']
        key = {}.fromkeys(y)
        class_names = list(key.keys())
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=random_state)
        model = None
        train_error = []
        test_error = []
        n_estimators_range = range(100, n_estimators + 1)
        for trees in n_estimators_range:    
            rf = RandomForestClassifier(n_estimators=trees)
            rf.fit(X_train, y_train)
            train_error_rate = 1 - rf.score(X_train, y_train)
            test_error_rate = 1 - rf.score(X_test, y_test)
            train_error.append(train_error_rate)
            test_error.append(test_error_rate)
            percentage = ((trees - 99) / (n_estimators - 99))
            self.form_create_training_random_forest_top_level_progress_progressbar.set(percentage)
            self.form_create_training_random_forest_top_level_progress_label.configure(text=f"Training with {trees} estimators")
            self.form_create_training_random_forest_top_level_progress_progressbar.update_idletasks()
            self.form_create_training_random_forest_top_level_progress_label.update_idletasks()
            self.update_idletasks()
            model = rf
        if model is not None:
            y_predict = model.predict(X_test)
            get_confusion_matrix = confusion_matrix(y_test, y_predict)
            get_classification_report = classification_report(y_test, y_predict, output_dict=True)
            model_training = {
                'algorithm': 'Random Forest',
                'class_names': class_names,
                'classification_report': get_classification_report,
                'confusion_matrix': get_confusion_matrix,
                'error_rate': {
                    'range': n_estimators_range,
                    'train_error': train_error,
                    'test_error': test_error
                },
                'epoch_loss': {
                    'epoch': None,
                    'training_loss': None,
                    'validation_loss': None
                },
                'epoch_accuracy': {
                    'epoch': None,
                    'training_accuracy': None,
                    'validation_accuracy': None
                },
                'trained_model': model
            }
            with open(training_path, 'wb') as file:
                pickle.dump(model_training, file)
            return training_path
        return None

    def decision_tree(self, dataset_path, training_path, random_state, max_depth):
        df = pd.read_csv(dataset_path)
        X = df.drop('class', axis=1)
        y = df['class']
        key = {}.fromkeys(y)
        class_names = list(key.keys())
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=random_state)
        model = None
        max_depth_range = None
        train_error = []
        test_error = []
        if max_depth == 0:
            max_depth_range = range(0, 1)
            dt = DecisionTreeClassifier(max_depth=None)
            dt.fit(X_train, y_train)
            train_error_rate = 1 - dt.score(X_train, y_train)
            test_error_rate = 1 - dt.score(X_test, y_test)
            train_error.append(train_error_rate)
            test_error.append(test_error_rate)
            percentage = 1
            self.form_create_training_decision_tree_top_level_progress_progressbar.set(percentage)
            self.form_create_training_decision_tree_top_level_progress_label.configure(text=f"Training with {trees} max depth")
            self.form_create_training_decision_tree_top_level_progress_progressbar.update_idletasks()
            self.form_create_training_decision_tree_top_level_progress_label.update_idletasks()
            self.update_idletasks()            
            model = dt
        else:
            max_depth_range = range(1, max_depth + 1)
            for trees in max_depth_range:    
                dt = DecisionTreeClassifier(max_depth=trees)
                dt.fit(X_train, y_train)
                train_error_rate = 1 - dt.score(X_train, y_train)
                test_error_rate = 1 - dt.score(X_test, y_test)
                train_error.append(train_error_rate)
                test_error.append(test_error_rate)
                percentage = (trees / max_depth)
                self.form_create_training_decision_tree_top_level_progress_progressbar.set(percentage)
                self.form_create_training_decision_tree_top_level_progress_label.configure(text=f"Training with {trees} max depth")
                self.form_create_training_decision_tree_top_level_progress_progressbar.update_idletasks()
                self.form_create_training_decision_tree_top_level_progress_label.update_idletasks()
                self.update_idletasks()                
                model = dt
        if model is not None:
            y_predict = model.predict(X_test)
            get_confusion_matrix = confusion_matrix(y_test, y_predict)
            get_classification_report = classification_report(y_test, y_predict, output_dict=True)
            model_training = {
                'algorithm': 'Decision Tree',
                'class_names': class_names,
                'classification_report': get_classification_report,
                'confusion_matrix': get_confusion_matrix,
                'error_rate': {
                    'range': max_depth_range,
                    'train_error': train_error,
                    'test_error': test_error
                },
                'epoch_loss': {
                    'epoch': None,
                    'training_loss': None,
                    'validation_loss': None
                },
                'epoch_accuracy': {
                    'epoch': None,
                    'training_accuracy': None,
                    'validation_accuracy': None
                },
                'trained_model': model
            }
            with open(training_path, 'wb') as file:
                pickle.dump(model_training, file)
            return training_path
        return None

    def k_nearest_neighbors(self, dataset_path, training_path, random_state, n_neighbors):
        df = pd.read_csv(dataset_path)
        X = df.drop('class', axis=1)
        y = df['class']
        key = {}.fromkeys(y)
        class_names = list(key.keys())
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=random_state)
        model = None
        train_error = []
        test_error = []
        n_neighbors_range = range(5, n_neighbors + 1)
        for trees in n_neighbors_range:    
            knn = KNeighborsClassifier(n_neighbors=trees)
            knn.fit(X_train, y_train)
            train_error_rate = 1 - knn.score(X_train, y_train)
            test_error_rate = 1 - knn.score(X_test, y_test)
            train_error.append(train_error_rate)
            test_error.append(test_error_rate)
            percentage = ((trees - 4) / (n_neighbors - 4))
            self.form_create_training_k_nearest_neighbors_top_level_progress_progressbar.set(percentage)
            self.form_create_training_k_nearest_neighbors_top_level_progress_label.configure(text=f"Training with {trees} estimators")
            self.form_create_training_k_nearest_neighbors_top_level_progress_progressbar.update_idletasks()
            self.form_create_training_k_nearest_neighbors_top_level_progress_label.update_idletasks()
            self.update_idletasks()
            model = knn
        if model is not None:
            y_predict = model.predict(X_test)
            get_confusion_matrix = confusion_matrix(y_test, y_predict)
            get_classification_report = classification_report(y_test, y_predict, output_dict=True)
            model_training = {
                'algorithm': 'K-Nearest Neighbors',
                'class_names': class_names,
                'classification_report': get_classification_report,
                'confusion_matrix': get_confusion_matrix,
                'error_rate': {
                    'range': n_neighbors_range,
                    'train_error': train_error,
                    'test_error': test_error
                },
                'epoch_loss': {
                    'epoch': None,
                    'training_loss': None,
                    'validation_loss': None
                },
                'epoch_accuracy': {
                    'epoch': None,
                    'training_accuracy': None,
                    'validation_accuracy': None
                },
                'trained_model': model
            }
            with open(training_path, 'wb') as file:
                pickle.dump(model_training, file)
            return training_path
        return None

    def support_vector_machine(self, dataset_path, training_path, random_state, c, kernel):
        df = pd.read_csv(dataset_path)
        X = df.drop('class', axis=1)
        y = df['class']
        key = {}.fromkeys(y)
        class_names = list(key.keys())
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=random_state)
        model = None
        train_error = []
        test_error = []
        c_range = range(1, c + 1)
        for trees in c_range:    
            svm = SVC(C=trees, kernel=kernel, probability=True)
            svm.fit(X_train, y_train)
            train_error_rate = 1 - svm.score(X_train, y_train)
            test_error_rate = 1 - svm.score(X_test, y_test)
            train_error.append(train_error_rate)
            test_error.append(test_error_rate)
            percentage = (trees / c)
            self.form_create_training_support_vector_machine_top_level_progress_progressbar.set(percentage)
            self.form_create_training_support_vector_machine_top_level_progress_label.configure(text=f"Training with {trees} C")
            self.form_create_training_support_vector_machine_top_level_progress_progressbar.update_idletasks()
            self.form_create_training_support_vector_machine_top_level_progress_label.update_idletasks()
            self.update_idletasks()            
            model = svm
        if model is not None:
            y_predict = model.predict(X_test)
            get_confusion_matrix = confusion_matrix(y_test, y_predict)
            get_classification_report = classification_report(y_test, y_predict, output_dict=True)
            model_training = {
                'algorithm': 'Support Vector Machine',
                'class_names': class_names,
                'classification_report': get_classification_report,
                'confusion_matrix': get_confusion_matrix,
                'error_rate': {
                    'range': c_range,
                    'train_error': train_error,
                    'test_error': test_error
                },
                'epoch_loss': {
                    'epoch': None,
                    'training_loss': None,
                    'validation_loss': None
                },
                'epoch_accuracy': {
                    'epoch': None,
                    'training_accuracy': None,
                    'validation_accuracy': None
                },
                'trained_model': model
            }
            with open(training_path, 'wb') as file:
                pickle.dump(model_training, file)
            return training_path
        return None

    def naive_bayes(self, dataset_path, training_path, random_state, var_smoothing, step):
        random_state = int(random_state)
        var_smoothing = float(var_smoothing)
        step = float(step)
        df = pd.read_csv(dataset_path)
        X = df.drop('class', axis=1)
        y = df['class']
        key = {}.fromkeys(y)
        class_names = list(key.keys())
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=random_state)
        model = None
        train_error = []
        test_error = []
        var_smoothing_range = np.arange(1e-9, var_smoothing, step)
        for trees in var_smoothing_range:    
            nb = GaussianNB(var_smoothing=trees)
            nb.fit(X_train, y_train)
            train_error_rate = 1 - nb.score(X_train, y_train)
            test_error_rate = 1 - nb.score(X_test, y_test)
            train_error.append(train_error_rate)
            test_error.append(test_error_rate)
            percentage = (trees / var_smoothing)
            self.form_create_training_naive_bayes_top_level_progress_progressbar.set(percentage)
            self.form_create_training_naive_bayes_top_level_progress_label.configure(text=f"Training with {trees} var smoothing")
            self.form_create_training_naive_bayes_top_level_progress_progressbar.update_idletasks()
            self.form_create_training_naive_bayes_top_level_progress_label.update_idletasks()
            self.update_idletasks()
            model = nb
        if model is not None:
            y_predict = model.predict(X_test)
            get_confusion_matrix = confusion_matrix(y_test, y_predict)
            get_classification_report = classification_report(y_test, y_predict, output_dict=True)
            model_training = {
                'algorithm': 'Naive Bayes',
                'class_names': class_names,
                'classification_report': get_classification_report,
                'confusion_matrix': get_confusion_matrix,
                'error_rate': {
                    'range': var_smoothing_range,
                    'train_error': train_error,
                    'test_error': test_error
                },
                'epoch_loss': {
                    'epoch': None,
                    'training_loss': None,
                    'validation_loss': None
                },
                'epoch_accuracy': {
                    'epoch': None,
                    'training_accuracy': None,
                    'validation_accuracy': None
                },
                'trained_model': model
            }
            with open(training_path, 'wb') as file:
                pickle.dump(model_training, file)
            return training_path
        return None

    def convolutional_neural_network(self, dataset_path, training_path, shuffle, epochs):
        data_directory = pathlib.Path(dataset_path)
        batch_size = 128
        image_height = 48
        image_width = 48
        training_dataset = tf.keras.utils.image_dataset_from_directory(
            data_directory,
            validation_split=0.2,
            subset='training',
            seed=123,
            image_size=(image_height, image_width),
            batch_size=batch_size,
            color_mode='grayscale'
        )
        validation_dataset = tf.keras.utils.image_dataset_from_directory(
            data_directory,
            validation_split=0.2,
            subset='validation',
            seed=123,
            image_size=(image_height, image_width),
            batch_size=batch_size,
            color_mode='grayscale'
        )
        class_names = training_dataset.class_names
        AUTOTUNE = tf.data.AUTOTUNE
        training_dataset = training_dataset.cache().shuffle(shuffle).prefetch(buffer_size=AUTOTUNE)
        validation_dataset = validation_dataset.cache().prefetch(buffer_size=AUTOTUNE)    
        normalization_layer = layers.Rescaling(1./255)
        training_dataset_normalized = training_dataset.map(lambda x, y: (normalization_layer(x), y))
        validation_dataset_normalized = validation_dataset.map(lambda x, y: (normalization_layer(x), y))
        number_classes = len(class_names)
        model = Sequential([
            layers.Conv2D(16, 3, padding='same', activation='relu', input_shape=(image_height, image_width, 1)),
            layers.MaxPooling2D(),
            layers.Conv2D(32, 3, padding='same', activation='relu'),
            layers.MaxPooling2D(),
            layers.Conv2D(64, 3, padding='same', activation='relu'),
            layers.MaxPooling2D(),
            layers.Flatten(),
            layers.Dense(128, activation='relu'),
            layers.Dense(number_classes)
        ])
        model.compile(
            optimizer='adam',
            loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
            metrics=['accuracy']
        )
        self.epoch_progress = ctk.CTkToplevel(self)
        self.epoch_progress.title("InSign")
        self.epoch_progress.geometry('700x400+600+200')
        self.epoch_progress.resizable(width=False, height=False)
        self.epoch_progress.after(250, lambda: self.epoch_progress.iconbitmap(temp_icon_path))
        textbox = ctk.CTkTextbox(self.epoch_progress, fg_color='black', text_color='white', wrap='word', corner_radius=0, border_width=0, font=self.font_14_consolas)
        textbox.pack(side="left", fill="both", expand=True)
        textbox.insert(ctk.END, f"Training Path: {training_path}\n")
        textbox.insert(ctk.END, f"Dataset Path: {dataset_path}\n")
        textbox.insert(ctk.END, f"With Convolutional Neural Network (CNN)\n")
        textbox.insert(ctk.END, f"Epochs Progress:\n")
        textbox.configure(state="disabled")
        self.epoch_progress.update_idletasks()
        self.epoch_progress.wm_attributes('-topmost', 1)
        history_queue = queue.Queue()

        def train_model():
            callback = tf.keras.callbacks.LambdaCallback(on_epoch_end=lambda epoch, logs: self.epoch_logger(textbox, epochs, epoch + 1, logs))
            history = model.fit(
                training_dataset_normalized,
                validation_data=validation_dataset_normalized,
                epochs=epochs,
                callbacks=[callback]
            )
            history_queue.put(history)
        def training_complete():
            history = history_queue.get()
            self.epoch_progress.destroy()
            self.on_close_top_level()
            get_training_path = None
            if model is not None:
                training_accuracy = history.history['accuracy']
                validation_accuracy = history.history['val_accuracy']
                training_loss = history.history['loss']
                validation_loss = history.history['val_loss']
                epochs_range = range(1, epochs + 1)
                y_value_true = np.concatenate([y for x, y in validation_dataset], axis=0)
                y_value_predict = np.argmax(model.predict(validation_dataset_normalized), axis=1)
                get_confusion_matrix = confusion_matrix(y_value_true, y_value_predict)
                get_classification_report = classification_report(y_value_true, y_value_predict, target_names=class_names, output_dict=True)
                model_training = {
                    'algorithm': 'Convolutional Neural Network',
                    'class_names': class_names,
                    'classification_report': get_classification_report,
                    'confusion_matrix': get_confusion_matrix,
                    'error_rate': {
                        'range': None,
                        'train_error': None,
                        'test_error': None
                    },
                    'epoch_loss': {
                        'epoch': epochs_range,
                        'training_loss': training_loss,
                        'validation_loss': validation_loss
                    },
                    'epoch_accuracy': {
                        'epoch': range(1, epochs + 1),
                        'training_accuracy': training_accuracy,
                        'validation_accuracy': validation_accuracy
                    },
                    'trained_model': model
                }
                with open(training_path, 'wb') as file:
                    pickle.dump(model_training, file)
                get_training_path = training_path
            self.training_graph_event(get_training_path)

        training_thread = threading.Thread(target=train_model)
        training_thread.start() 

        self.after(100, lambda: self.check_training_thread(training_thread, training_complete))

    def check_training_thread(self, training_thread, callback):
        if training_thread.is_alive():
            self.after(100, lambda: self.check_training_thread(training_thread, callback))
        else:
            callback()

    def epoch_logger(self, textbox, epochs, epoch, logs):
        time.sleep(1)
        self.form_create_training_convolutional_neural_network_top_level_progress_progressbar.set((epoch/epochs))
        self.form_create_training_convolutional_neural_network_top_level_progress_label.configure(text=f"Epoch: {epoch}")
        new_text = f'''Epoch {epoch}/{epochs}:
loss: {logs["loss"]:.4f} - accuracy: {logs["accuracy"]:.4f} - val_loss: {logs["val_loss"]:.4f} - val_accuracy: {logs["val_accuracy"]:.4f}
'''
        textbox.configure(state="normal")
        textbox.insert(ctk.END, new_text)
        textbox.see(ctk.END)
        textbox.configure(state="disabled")
        time.sleep(1)

# ==============================================================================================================================================
# history
    
    def history_control_select_button_event(self):
        history_path = filedialog.askopenfilename()
        self.history_selected_path_name_entry_event(history_path)

    def history_control_create_button_event(self):
        self.set_up_form_create_history()

    def history_control_delete_button_event(self):
        history_path = self.history_selected_path_name_entry.get()
        if history_path:
            results = messagebox.askyesno('Confirmation', 'Are you sure you want to delete this history file?')
            if results:
                os.remove(history_path)
                self.history_selected_path_clear_button_event()   
        else:
            messagebox.showinfo('Warning', 'Please select the history first!')

    def history_selected_path_name_entry_event(self, history_path):
        self.history_selected_path_clear_button_event()
        if history_path:
            if os.path.splitext(history_path)[1].lower() == '.xlsx':
                data = pd.read_excel(history_path, sheet_name=None)
                get_data = []        
                for sheet_name, sheet_data in data.items():
                    if re.match(r'^\d{4}-\d{2}-\d{2} \d{2}_\d{2}_\d{2}$', sheet_name):
                        temp_sheet = sheet_name.split(' ')
                        temp_sheet[1] = temp_sheet[1].replace('_', ':')
                        sheet_id = temp_sheet[0] + ' | ' + temp_sheet[1]
                        get_data.append({
                            'sheet': sheet_id,
                            'values': sheet_data.values.tolist()
                        })
                self.history_selected_path_name_entry.configure(state="normal")
                self.history_selected_path_name_entry.delete(0, ctk.END)
                self.history_selected_path_name_entry.insert(0, history_path)
                self.history_selected_path_name_entry.configure(state="readonly")                
                self.history_list_scrollableframe_event(get_data)
            else:
                messagebox.showinfo('Warning', 'Sorry, the history file is not compatible with our reader system!')

    def history_selected_path_clear_button_event(self):
        self.history_selected_path_name_entry.configure(state="normal")
        self.history_selected_path_name_entry.delete(0, ctk.END)
        self.history_selected_path_name_entry.configure(state="readonly")
        for widget in self.history_list_scrollableframe.winfo_children():
            widget.destroy()
        self.history_list_no_data_label = ctk.CTkLabel(self.history_list_scrollableframe, text="No Data", anchor="w", font=self.font_13, height=13)
        self.history_list_no_data_label.pack(padx=(9, 0), pady=0, fill="both")
        self.history_selected_translation_clear_button_event()

    def history_list_scrollableframe_event(self, get_data):
        for widget in self.history_list_scrollableframe.winfo_children():
            widget.destroy()
        if len(get_data) > 0:
            for date_time in get_data:
                history_date_time_list_button = ctk.CTkButton(self.history_list_scrollableframe, corner_radius=10, border_spacing=10, height=40, text=date_time['sheet'], fg_color="transparent", text_color=("gray10", "gray90"), hover_color=("gray70", "gray30"), anchor="w", font=self.font_13, command=lambda data=date_time: self.history_date_time_list_button_event(data))
                history_date_time_list_button.pack(padx=(9, 0), pady=0, fill="both")
        else:
            self.history_list_no_data_label = ctk.CTkLabel(self.history_list_scrollableframe, text="No Data", anchor="w", font=self.font_13, height=13)
            self.history_list_no_data_label.pack(padx=(9, 0), pady=0, fill="both")

    def history_date_time_list_button_event(self, data):
        self.history_selected_translation_datetime_entry.configure(state="normal")
        self.history_selected_translation_datetime_entry.delete(0, ctk.END)
        self.history_selected_translation_datetime_entry.insert(0, data['sheet'])
        self.history_selected_translation_datetime_entry.configure(state="readonly")

        self.history_translation_textbox.configure(state="normal")
        self.history_translation_textbox.delete("1.0", ctk.END)
        for index, translation in enumerate(data['values']):
            if index == len(data['values']) - 1:
                self.history_translation_textbox.insert(ctk.END, f'{translation[1]} | {translation[2]}\n\n')
                self.history_translation_textbox.insert(ctk.END, f'{translation[0]}')
            else:
                self.history_translation_textbox.insert(ctk.END, f'{translation[1]} | {translation[2]}\n\n')
                self.history_translation_textbox.insert(ctk.END, f'{translation[0]}\n\n')
        self.history_translation_textbox.configure(state="disabled")        

    def history_selected_translation_clear_button_event(self):
        self.history_selected_translation_datetime_entry.configure(state="normal")
        self.history_selected_translation_datetime_entry.delete(0, ctk.END)
        self.history_selected_translation_datetime_entry.configure(state="readonly")

        self.history_translation_textbox.configure(state="normal")
        self.history_translation_textbox.delete("1.0", ctk.END)
        self.history_translation_textbox.insert(ctk.END, "No Data")
        self.history_translation_textbox.configure(state="disabled")

    def history_selected_translation_delete_button_event(self):
        history_path = self.history_selected_path_name_entry.get()
        sheet_name = self.history_selected_translation_datetime_entry.get().replace(' | ', ' ').replace(':', '_')
        if history_path:
            if sheet_name:
                workbook = openpyxl.load_workbook(history_path)
                sheet_names = workbook.sheetnames
                if len(sheet_names) == 1:
                    results = messagebox.askyesno('Confirmation', 'You only have one sheet left, if you still want to delete, the history file will be deleted, are you sure you want to delete?')
                    if results:
                        os.remove(history_path)
                        self.history_selected_path_clear_button_event()   
                else:
                    results = messagebox.askyesno('Confirmation', 'Are you sure you want to delete this translation?')
                    if results:
                        sheet_to_remove = workbook[sheet_name]
                        workbook.remove(sheet_to_remove)
                        workbook.save(history_path)
                        self.history_selected_path_name_entry_event(history_path)
            else:
                messagebox.showinfo('Warning', 'Please select the date time of translation list first!')
        else:
            messagebox.showinfo('Warning', 'Please select the history first!')
    
    # create history
    def form_create_history_top_level_select_button_event(self):
        history_directory = filedialog.askdirectory()
        if history_directory:
            self.form_create_history_top_level_selected_entry.configure(state="normal")
            self.form_create_history_top_level_selected_entry.delete(0, ctk.END)
            self.form_create_history_top_level_selected_entry.insert(0, history_directory)
            self.form_create_history_top_level_selected_entry.configure(state="readonly")

    def form_create_history_top_level_create_button_event(self):
        history_directory = self.form_create_history_top_level_selected_entry.get()
        history_name = self.form_create_history_top_level_name_entry.get()
        if history_directory:
            if history_name:
                history_path = history_directory + '/' + history_name.split('.')[0] + '.xlsx'
                workbook = Workbook()
                sheet = workbook.active
                sheet.title = 'Signfinity'
                sheet['A1'] = 'Welcome, you can save your signfinity sign language translation history here :)'
                workbook.save(history_path)
                self.history_selected_path_name_entry_event(history_path)
                self.on_close_top_level()
            else:
                messagebox.showinfo("Warning", "Please complete the history name section of the form!")
        else:
            messagebox.showinfo("Warning", "Please complete the history directory section of the form!")            

# ==============================================================================================================================================
# setting
    
    def setting_application_appearance_mode_optionmenu_event(self, choice):
        ctk.set_appearance_mode(choice)

    def setting_application_color_theme_optionmenu_event(self, choice):
        theme_json = None
        if choice == 'Blue':
            theme_json = json.loads(self.blue_json_string)
        elif choice == 'Dark Blue':
            theme_json = json.loads(self.dark_blue_json_string)
        elif choice == 'Green':
            theme_json = json.loads(self.green_json_string)    

        for button in self.button_group:
            button.configure(fg_color=theme_json['CTkButton']['fg_color'])
            button.configure(hover_color=theme_json['CTkButton']['hover_color'])
            button.configure(border_color=theme_json['CTkButton']['border_color'])
            button.configure(text_color=theme_json['CTkButton']['text_color'])
        for switch in self.switch_group:
            switch.configure(fg_color=theme_json['CTkSwitch']['fg_color'])
            switch.configure(progress_color=theme_json['CTkSwitch']['progress_color'])
            switch.configure(button_color=theme_json['CTkSwitch']['button_color'])
            switch.configure(button_hover_color=theme_json['CTkSwitch']['button_hover_color'])
            switch.configure(text_color=theme_json['CTkSwitch']['text_color'])
        for optionmenu in self.optionmenu_group:
            optionmenu.configure(fg_color=theme_json['CTkOptionMenu']['fg_color'])
            optionmenu.configure(button_color=theme_json['CTkOptionMenu']['button_color'])
            optionmenu.configure(button_hover_color=theme_json['CTkOptionMenu']['button_hover_color'])
            optionmenu.configure(text_color=theme_json['CTkOptionMenu']['text_color'])
        for progressbar in self.progressbar_group:
            progressbar.configure(fg_color=theme_json['CTkProgressBar']['fg_color'])
            progressbar.configure(progress_color=theme_json['CTkProgressBar']['progress_color'])
        for tabview in self.tabview_group:
            tabview.configure(segmented_button_fg_color=theme_json['CTkSegmentedButton']['fg_color'])
            tabview.configure(segmented_button_selected_color=theme_json['CTkSegmentedButton']['selected_color'])
            tabview.configure(segmented_button_selected_hover_color=theme_json['CTkSegmentedButton']['selected_hover_color'])
            tabview.configure(segmented_button_unselected_color=theme_json['CTkSegmentedButton']['unselected_color'])
            tabview.configure(segmented_button_unselected_hover_color=theme_json['CTkSegmentedButton']['unselected_hover_color'])
        for header in self.header_group:
            header.configure(fg_color=theme_json['CTkButton']['fg_color'])
            header.configure(hover_color=theme_json['CTkButton']['fg_color'])

        for form_button in self.form_button_group:
            form_button.configure(fg_color=theme_json['CTkButton']['fg_color'])
            form_button.configure(hover_color=theme_json['CTkButton']['hover_color'])
            form_button.configure(border_color=theme_json['CTkButton']['border_color'])
            form_button.configure(text_color=theme_json['CTkButton']['text_color'])            
        for form_optionmenu in self.form_optionmenu_group:
            form_optionmenu.configure(fg_color=theme_json['CTkOptionMenu']['fg_color'])
            form_optionmenu.configure(button_color=theme_json['CTkOptionMenu']['button_color'])
            form_optionmenu.configure(button_hover_color=theme_json['CTkOptionMenu']['button_hover_color'])
            form_optionmenu.configure(text_color=theme_json['CTkOptionMenu']['text_color'])            

# ==============================================================================================================================================

    def on_close_top_level(self):
        self.form_button_group = []
        self.form_optionmenu_group = []
        self.form_create_top_level.destroy()
        self.form_create_top_level = None

    def on_close_main(self):
        plt.close()
        self.destroy()
        self.quit()

app = App()
app.mainloop()
